;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;
;#define SPIN A.0
;#include <DHT11/DHT11.h>
;
;#define DDRV DDR SPIN
;#define OUT_PIN PORT SPIN
;#define IN_PIN PIN SPIN
;#define setDHT11Pin(x) # define IN_PIN x
;
;
;
;// count bit
;unsigned char bit_count = 0;
;// feedback count bit return
;unsigned char c = 0;
;// temperature and humidity value
;
;// loop count
;unsigned char cl = 0;
;
;//***** start methods *****//
;
;void request(void)
; 0000 0006 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    DDRV = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;    // DDRD |= (1<<0);
;
;    OUT_PIN = 0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;    // PORTD &= ~(1<<0);
;
;    // delay_ms(18);
;    delay_ms(18);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;    OUT_PIN = 1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;    // PORTD |= (1<<0);
;}
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;
;
;void response()
;{
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;    // PIND
;    //DDRD &= ~(1<<0);
;    DDRV = 0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;    while(IN_PIN)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;    {
;        delay_us(1);
;PCODE: $00000022 VOL: 0
;        cl++;
;PCODE: $00000023 VOL: 0
;        if (cl > 80) break;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;    }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;    cl = 0;
;PCODE: $0000002B VOL: 0
;    while(IN_PIN==0)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;    {
;        delay_us(40);
;PCODE: $00000030 VOL: 0
;        cl++;
;PCODE: $00000031 VOL: 0
;        if (cl > 2) break;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;    }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;    cl = 0;
;PCODE: $00000039 VOL: 0
;    while(IN_PIN)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;    {
;        delay_us(40);
;PCODE: $0000003E VOL: 0
;        cl++;
;PCODE: $0000003F VOL: 0
;        if (cl > 2) break;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;    }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;}
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;
;int i;
;unsigned char recive()
;{
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;    while(bit_count<8)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;    {
;        bit_count++;
;PCODE: $0000004F VOL: 0
;
;        while(IN_PIN==0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;        delay_us(30);
;PCODE: $00000056 VOL: 0
;
;        if(IN_PIN)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;        {
;            c=(c<<1)|(0x01);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;        } else {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;            c=c<<1;
;PCODE: $00000060 VOL: 0
;        }
;PCODE: $00000061 VOL: 0
;
;        for (i=0;((i<1000) && IN_PIN);i++){delay_us(10);};
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;        // while(IN_PIN);
;    }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;    bit_count=0;
;PCODE: $0000007B VOL: 0
;
;    return c;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;}
;PCODE: $0000007E VOL: 0
;
;unsigned char readDHT11(char *temp,unsigned char *hum){
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;    unsigned char  d_rh, d_temp, check;
;    request();
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;	*temp -> Y+6
;	*hum -> Y+4
;	d_rh -> R17
;	d_temp -> R16
;	check -> R19
;PCODE: $00000083 VOL: 0
;    response();
;PCODE: $00000084 VOL: 0
;    *hum   = recive();
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;    d_rh   = recive();
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;    *temp = (char)recive();
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;    d_temp = recive();
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;    check  = recive();
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;
;
;
;   return ((*hum  + d_rh + *temp + d_temp) == check) ;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;}
;PCODE: $000000A4 VOL: 0
;
;unsigned char hum = 0;
;char temp = 0;
;
;void readData(unsigned int number) {
; 0000 000B void readData(unsigned int number) {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 000C     unsigned int x;
; 0000 000D     x = number;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;	number -> Y+2
;	x -> R16,R17
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 000E     lcd_putchar(x / 10 + 48);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 000F     x = x % 10;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0010     lcd_putchar(x + 48);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0011 }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;
;void handleEvent(char temp) {
; 0000 0013 void handleEvent(char temp) {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0014      if (temp <= 30) {
;PCODE: $000000C2 VOL: 0
;	temp -> Y+0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0015         PORTB.0 = 0;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0016         PORTB.1 = 1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0017      }
; 0000 0018      else {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0019         PORTB.0 = 1;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 001A         PORTB.1 = 0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 001B      }
;PCODE: $000000D0 VOL: 0
; 0000 001C }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;
;void main(void)
; 0000 001F {
;PCODE: $000000D4 VOL: 0
; 0000 0020 // Input/Output Ports initialization
; 0000 0021 // Port A initialization
; 0000 0022 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0023 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0024 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0025 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0026 
; 0000 0027 // Port B initialization
; 0000 0028 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0029 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 002A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 002C 
; 0000 002D // Port C initialization
; 0000 002E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 002F DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0030 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0031 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0032 
; 0000 0033 // Port D initialization
; 0000 0034 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0035 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0036 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0037 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0038 
; 0000 0039 // Timer/Counter 0 initialization
; 0000 003A // Clock source: System Clock
; 0000 003B // Clock value: Timer 0 Stopped
; 0000 003C // Mode: Normal top=0xFF
; 0000 003D // OC0 output: Disconnected
; 0000 003E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 003F TCNT0=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0040 OCR0=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0041 
; 0000 0042 // Timer/Counter 1 initialization
; 0000 0043 // Clock source: System Clock
; 0000 0044 // Clock value: Timer1 Stopped
; 0000 0045 // Mode: Normal top=0xFFFF
; 0000 0046 // OC1A output: Disconnected
; 0000 0047 // OC1B output: Disconnected
; 0000 0048 // Noise Canceler: Off
; 0000 0049 // Input Capture on Falling Edge
; 0000 004A // Timer1 Overflow Interrupt: Off
; 0000 004B // Input Capture Interrupt: Off
; 0000 004C // Compare A Match Interrupt: Off
; 0000 004D // Compare B Match Interrupt: Off
; 0000 004E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 004F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0050 TCNT1H=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0051 TCNT1L=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0052 ICR1H=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0053 ICR1L=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0054 OCR1AH=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0055 OCR1AL=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0056 OCR1BH=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0057 OCR1BL=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0058 
; 0000 0059 // Timer/Counter 2 initialization
; 0000 005A // Clock source: System Clock
; 0000 005B // Clock value: Timer2 Stopped
; 0000 005C // Mode: Normal top=0xFF
; 0000 005D // OC2 output: Disconnected
; 0000 005E ASSR=0<<AS2;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 005F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0060 TCNT2=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0061 OCR2=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0062 
; 0000 0063 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0064 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0065 
; 0000 0066 // External Interrupt(s) initialization
; 0000 0067 // INT0: Off
; 0000 0068 // INT1: Off
; 0000 0069 // INT2: Off
; 0000 006A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 006B MCUCSR=(0<<ISC2);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 006C 
; 0000 006D // USART initialization
; 0000 006E // USART disabled
; 0000 006F UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0070 
; 0000 0071 // Analog Comparator initialization
; 0000 0072 // Analog Comparator: Off
; 0000 0073 // The Analog Comparator's positive input is
; 0000 0074 // connected to the AIN0 pin
; 0000 0075 // The Analog Comparator's negative input is
; 0000 0076 // connected to the AIN1 pin
; 0000 0077 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0078 
; 0000 0079 // ADC initialization
; 0000 007A // ADC Clock frequency: 1000.000 kHz
; 0000 007B // ADC Voltage Reference: AREF pin
; 0000 007C // ADC Auto Trigger Source: Free Running
; 0000 007D ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 007E SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 007F 
; 0000 0080 // SPI initialization
; 0000 0081 // SPI disabled
; 0000 0082 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0083 
; 0000 0084 // TWI initialization
; 0000 0085 // TWI disabled
; 0000 0086 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0087 
; 0000 0088 // Alphanumeric LCD initialization
; 0000 0089 // Connections are specified in the
; 0000 008A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 008B // RS - PORTC Bit 2
; 0000 008C // RD - PORTC Bit 1
; 0000 008D // EN - PORTC Bit 3
; 0000 008E // D4 - PORTC Bit 4
; 0000 008F // D5 - PORTC Bit 5
; 0000 0090 // D6 - PORTC Bit 6
; 0000 0091 // D7 - PORTC Bit 7
; 0000 0092 // Characters/line: 16
; 0000 0093 lcd_init(16);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0094 
; 0000 0095 // Global enable interrupts
; 0000 0096 #asm("sei")
;PCODE: $0000011B VOL: 0
	sei
;PCODE: $0000011C VOL: 0
; 0000 0097 
; 0000 0098 while (1)
;PCODE: $0000011D VOL: 0
; 0000 0099       {
; 0000 009A         readDHT11(&temp,&hum);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 009B         lcd_gotoxy(0,0);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 009C         lcd_putsf("Humidity: ");
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 009D         readData(hum);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 009E         lcd_gotoxy(12, 0);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 009F         lcd_putchar(37);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00A0 
; 0000 00A1         lcd_gotoxy(0,1);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A2         lcd_putsf("Temp: ");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00A3         readData(temp);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00A4         lcd_gotoxy(8,1);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00A5         lcd_putchar(223);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00A6         lcd_putchar(67);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00A7         handleEvent(temp);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00A8       }
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00A9 }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;
