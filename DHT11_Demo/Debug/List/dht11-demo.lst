
AVRASM ver. 2.1.30  F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm Thu Oct 28 13:30:00 2021

F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1089): warning: Register r4 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1091): warning: Register r8 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1092): warning: Register r9 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1093): warning: Register r6 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1094): warning: Register r11 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1095): warning: Register r10 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1096): warning: Register r13 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _bit_count=R5
                 	.DEF _c=R4
                 	.DEF _cl=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _hum=R6
                 	.DEF _temp=R11
                 	.DEF _tempLimit=R10
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0047 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0014      	.DB  0x0,0x0,0x14,0x0
                 
                 _0x24:
00002e f9c0
00002f b0a4
000030 9299
000031 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000032 9080      	.DB  0x80,0x90
                 _0x0:
000033 7548
000034 696d
000035 6964
000036 7974      	.DB  0x48,0x75,0x6D,0x69,0x64,0x69,0x74,0x79
000037 203a
000038 5400
000039 6d65
00003a 3a70      	.DB  0x3A,0x20,0x0,0x54,0x65,0x6D,0x70,0x3A
00003b 0020      	.DB  0x20,0x0
                 _0x2000003:
00003c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003d 0008      	.DW  0x08
00003e 0004      	.DW  0x04
00003f 0054      	.DW  __REG_VARS*2
                 
000040 000a      	.DW  0x0A
000041 0160      	.DW  _number
000042 005c      	.DW  _0x24*2
                 
000043 0002      	.DW  0x02
000044 016a      	.DW  __base_y_G100
000045 0078      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000046 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000047 94f8      	CLI
000048 27ee      	CLR  R30
000049 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004a e0f1      	LDI  R31,1
00004b bffb      	OUT  GICR,R31
00004c bfeb      	OUT  GICR,R30
00004d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 0175 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;#define SPIN A.0
                 ;#include <DHT11/DHT11.h>
                 ;
                 ;#define DDRV DDR SPIN
                 ;#define OUT_PIN PORT SPIN
                 ;#define IN_PIN PIN SPIN
                 ;#define setDHT11Pin(x) # define IN_PIN x
                 ;
                 ;
                 ;
                 ;// count bit
                 ;unsigned char bit_count = 0;
                 ;// feedback count bit return
                 ;unsigned char c = 0;
                 ;// temperature and humidity value
                 ;
                 ;// loop count
                 ;unsigned char cl = 0;
                 ;
                 ;//***** start methods *****//
                 ;
                 ;void request(void)
                 ; 0000 0006 {
                 
                 	.CSEG
                 _request:
                 ; .FSTART _request
                 ;    DDRV = 1;
000074 9ad0      	SBI  0x1A,0
                 ;    // DDRD |= (1<<0);
                 ;
                 ;    OUT_PIN = 0;
000075 98d8      	CBI  0x1B,0
                 ;    // PORTD &= ~(1<<0);
                 ;
                 ;    // delay_ms(18);
                 ;    delay_ms(18);
000076 e1a2      	LDI  R26,LOW(18)
000077 e0b0      	LDI  R27,0
000078 940e 0267 	CALL _delay_ms
                 ;
                 ;    OUT_PIN = 1;
00007a 9ad8      	SBI  0x1B,0
                 ;    // PORTD |= (1<<0);
                 ;}
00007b 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void response()
                 ;{
                 _response:
                 ; .FSTART _response
                 ;    // PIND
                 ;    //DDRD &= ~(1<<0);
                 ;    DDRV = 0;
00007c 98d0      	CBI  0x1A,0
                 ;
                 ;    while(IN_PIN)
                 _0xB:
00007d 9bc8      	SBIS 0x19,0
00007e c007      	RJMP _0xD
                 ;    {
                 ;        delay_us(1);
                +
00007f e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000080 958a     +DEC R24
000081 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;        cl++;
000082 9473      	INC  R7
                 ;        if (cl > 80) break;
000083 e5e0      	LDI  R30,LOW(80)
000084 15e7      	CP   R30,R7
000085 f7b8      	BRSH _0xB
                 ;    }
                 _0xD:
                 ;
                 ;    cl = 0;
000086 2477      	CLR  R7
                 ;    while(IN_PIN==0)
                 _0xF:
000087 99c8      	SBIC 0x19,0
000088 c003      	RJMP _0x11
                 ;    {
                 ;        delay_us(40);
000089 940e 0245 	CALL SUBOPT_0x0
                 ;        cl++;
                 ;        if (cl > 2) break;
00008b f7d8      	BRSH _0xF
                 ;    }
                 _0x11:
                 ;
                 ;    cl = 0;
00008c 2477      	CLR  R7
                 ;    while(IN_PIN)
                 _0x13:
00008d 9bc8      	SBIS 0x19,0
00008e c003      	RJMP _0x15
                 ;    {
                 ;        delay_us(40);
00008f 940e 0245 	CALL SUBOPT_0x0
                 ;        cl++;
                 ;        if (cl > 2) break;
000091 f7d8      	BRSH _0x13
                 ;    }
                 _0x15:
                 ;}
000092 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;int i;
                 ;unsigned char recive()
                 ;{
                 _recive:
                 ; .FSTART _recive
                 ;    while(bit_count<8)
                 _0x17:
000093 e0e8      	LDI  R30,LOW(8)
000094 165e      	CP   R5,R30
000095 f500      	BRSH _0x19
                 ;    {
                 ;        bit_count++;
000096 9453      	INC  R5
                 ;
                 ;        while(IN_PIN==0);
                 _0x1A:
000097 9bc8      	SBIS 0x19,0
000098 cffe      	RJMP _0x1A
                 ;
                 ;        delay_us(30);
                +
000099 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
00009a 958a     +DEC R24
00009b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ;
                 ;        if(IN_PIN)
00009c 9bc8      	SBIS 0x19,0
00009d c005      	RJMP _0x1D
                 ;        {
                 ;            c=(c<<1)|(0x01);
00009e 2de4      	MOV  R30,R4
00009f 0fee      	LSL  R30
0000a0 60e1      	ORI  R30,1
0000a1 2e4e      	MOV  R4,R30
                 ;        } else {
0000a2 c001      	RJMP _0x1E
                 _0x1D:
                 ;            c=c<<1;
0000a3 0c44      	LSL  R4
                 ;        }
                 _0x1E:
                 ;
                 ;        for (i=0;((i<1000) && IN_PIN);i++){delay_us(10);};
0000a4 2488      	CLR  R8
0000a5 2499      	CLR  R9
                 _0x20:
0000a6 eee8      	LDI  R30,LOW(1000)
0000a7 e0f3      	LDI  R31,HIGH(1000)
0000a8 168e      	CP   R8,R30
0000a9 069f      	CPC  R9,R31
0000aa f414      	BRGE _0x22
0000ab 99c8      	SBIC 0x19,0
0000ac c001      	RJMP _0x23
                 _0x22:
0000ad c007      	RJMP _0x21
                 _0x23:
                +
0000ae e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000af 958a     +DEC R24
0000b0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000b1 01f4      	MOVW R30,R8
0000b2 9631      	ADIW R30,1
0000b3 014f      	MOVW R8,R30
0000b4 cff1      	RJMP _0x20
                 _0x21:
                 ;
                 ;        // while(IN_PIN);
                 ;    }
0000b5 cfdd      	RJMP _0x17
                 _0x19:
                 ;
                 ;    bit_count=0;
0000b6 2455      	CLR  R5
                 ;
                 ;    return c;
0000b7 2de4      	MOV  R30,R4
0000b8 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;unsigned char readDHT11(char *temp,unsigned char *hum){
                 _readDHT11:
                 ; .FSTART _readDHT11
                 ;    unsigned char  d_rh, d_temp, check;
                 ;    request();
0000b9 93ba      	ST   -Y,R27
0000ba 93aa      	ST   -Y,R26
0000bb 940e 028d 	CALL __SAVELOCR4
                 ;	*temp -> Y+6
                 ;	*hum -> Y+4
                 ;	d_rh -> R17
                 ;	d_temp -> R16
                 ;	check -> R19
0000bd dfb6      	RCALL _request
                 ;    response();
0000be dfbd      	RCALL _response
                 ;    *hum   = recive();
0000bf dfd3      	RCALL _recive
0000c0 81ac      	LDD  R26,Y+4
0000c1 81bd      	LDD  R27,Y+4+1
0000c2 93ec      	ST   X,R30
                 ;    d_rh   = recive();
0000c3 dfcf      	RCALL _recive
0000c4 2f1e      	MOV  R17,R30
                 ;    *temp = (char)recive();
0000c5 dfcd      	RCALL _recive
0000c6 81ae      	LDD  R26,Y+6
0000c7 81bf      	LDD  R27,Y+6+1
0000c8 93ec      	ST   X,R30
                 ;    d_temp = recive();
0000c9 dfc9      	RCALL _recive
0000ca 2f0e      	MOV  R16,R30
                 ;    check  = recive();
0000cb dfc7      	RCALL _recive
0000cc 2f3e      	MOV  R19,R30
                 ;
                 ;
                 ;
                 ;   return ((*hum  + d_rh + *temp + d_temp) == check) ;
0000cd 81ac      	LDD  R26,Y+4
0000ce 81bd      	LDD  R27,Y+4+1
0000cf 91ac      	LD   R26,X
0000d0 27bb      	CLR  R27
0000d1 2fe1      	MOV  R30,R17
0000d2 e0f0      	LDI  R31,0
0000d3 0fea      	ADD  R30,R26
0000d4 1ffb      	ADC  R31,R27
0000d5 010f      	MOVW R0,R30
0000d6 81ae      	LDD  R26,Y+6
0000d7 81bf      	LDD  R27,Y+6+1
0000d8 91ec      	LD   R30,X
0000d9 e0f0      	LDI  R31,0
0000da 01d0      	MOVW R26,R0
0000db 0fae      	ADD  R26,R30
0000dc 1fbf      	ADC  R27,R31
0000dd 27ee      	CLR  R30
0000de 0fa0      	ADD  R26,R16
0000df 1fbe      	ADC  R27,R30
0000e0 2fe3      	MOV  R30,R19
0000e1 e0f0      	LDI  R31,0
0000e2 940e 0271 	CALL __EQW12
0000e4 940e 0292 	CALL __LOADLOCR4
0000e6 9628      	ADIW R28,8
0000e7 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;#define DK1 PORTC.0
                 ;#define DK2 PORTC.1
                 ;
                 ;unsigned char hum = 0;
                 ;char temp = 0;
                 ;
                 ;unsigned char tempLimit = 20;
                 ;
                 ;unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
                 
                 	.DSEG
                 ;
                 ;void readData(unsigned int number) {
                 ; 0000 0012 void readData(unsigned int number) {
                 
                 	.CSEG
                 _readData:
                 ; .FSTART _readData
                 ; 0000 0013     unsigned int x;
                 ; 0000 0014     x = number;
0000e8 93ba      	ST   -Y,R27
0000e9 93aa      	ST   -Y,R26
0000ea 931a      	ST   -Y,R17
0000eb 930a      	ST   -Y,R16
                 ;	number -> Y+2
                 ;	x -> R16,R17
                +
0000ec 810a     +LDD R16 , Y + 2
0000ed 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
                 ; 0000 0015     lcd_putchar(x / 10 + 48);
0000ee 01d8      	MOVW R26,R16
0000ef e0ea      	LDI  R30,LOW(10)
0000f0 e0f0      	LDI  R31,HIGH(10)
0000f1 940e 0277 	CALL __DIVW21U
0000f3 5de0      	SUBI R30,-LOW(48)
0000f4 2fae      	MOV  R26,R30
0000f5 d0f9      	RCALL _lcd_putchar
                 ; 0000 0016     x = x % 10;
0000f6 01d8      	MOVW R26,R16
0000f7 e0ea      	LDI  R30,LOW(10)
0000f8 e0f0      	LDI  R31,HIGH(10)
0000f9 940e 028a 	CALL __MODW21U
0000fb 018f      	MOVW R16,R30
                 ; 0000 0017     lcd_putchar(x + 48);
0000fc 2fa0      	MOV  R26,R16
0000fd 5da0      	SUBI R26,-LOW(48)
0000fe d0f0      	RCALL _lcd_putchar
                 ; 0000 0018 }
0000ff 8119      	LDD  R17,Y+1
000100 8108      	LDD  R16,Y+0
000101 9624      	ADIW R28,4
000102 9508      	RET
                 ; .FEND
                 ;
                 ;void handleTemp(char temp, unsigned char tempLimit) {
                 ; 0000 001A void handleTemp(char temp, unsigned char tempLimit) {
                 _handleTemp:
                 ; .FSTART _handleTemp
                 ; 0000 001B      if (temp < tempLimit) {
000103 93aa      	ST   -Y,R26
                 ;	temp -> Y+1
                 ;	tempLimit -> Y+0
000104 81e8      	LD   R30,Y
000105 81a9      	LDD  R26,Y+1
000106 17ae      	CP   R26,R30
000107 f418      	BRSH _0x25
                 ; 0000 001C         PORTB.0 = 0;
000108 98c0      	CBI  0x18,0
                 ; 0000 001D         PORTB.1 = 1;
000109 9ac1      	SBI  0x18,1
                 ; 0000 001E      }
                 ; 0000 001F      else if (temp == tempLimit) {
00010a c00d      	RJMP _0x2A
                 _0x25:
00010b 81e8      	LD   R30,Y
00010c 81a9      	LDD  R26,Y+1
00010d 17ea      	CP   R30,R26
00010e f419      	BRNE _0x2B
                 ; 0000 0020         PORTB.0 = 1;
00010f 9ac0      	SBI  0x18,0
                 ; 0000 0021         PORTB.1 = 1;
000110 9ac1      	SBI  0x18,1
                 ; 0000 0022      }
                 ; 0000 0023      else if (temp > tempLimit) {
000111 c006      	RJMP _0x30
                 _0x2B:
000112 81e8      	LD   R30,Y
000113 81a9      	LDD  R26,Y+1
000114 17ea      	CP   R30,R26
000115 f410      	BRSH _0x31
                 ; 0000 0024         PORTB.0 = 1;
000116 9ac0      	SBI  0x18,0
                 ; 0000 0025         PORTB.1 = 0;
000117 98c1      	CBI  0x18,1
                 ; 0000 0026      }
                 ; 0000 0027 }
                 _0x31:
                 _0x30:
                 _0x2A:
000118 c0ca      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;void handleHum(unsigned char hum) {
                 ; 0000 0029 void handleHum(unsigned char hum) {
                 _handleHum:
                 ; .FSTART _handleHum
                 ; 0000 002A     if (hum < 80)
000119 93aa      	ST   -Y,R26
                 ;	hum -> Y+0
00011a 81a8      	LD   R26,Y
00011b 35a0      	CPI  R26,LOW(0x50)
00011c f410      	BRSH _0x36
                 ; 0000 002B     {
                 ; 0000 002C         PORTB.4 = 0;
00011d 98c4      	CBI  0x18,4
                 ; 0000 002D     }
                 ; 0000 002E     else
00011e c001      	RJMP _0x39
                 _0x36:
                 ; 0000 002F     {
                 ; 0000 0030         PORTB.4 = 1;
00011f 9ac4      	SBI  0x18,4
                 ; 0000 0031     }
                 _0x39:
                 ; 0000 0032 }
000120 940c 0243 	JMP  _0x2020001
                 ; .FEND
                 ;
                 ;void display(unsigned int x) {
                 ; 0000 0034 void display(unsigned int x) {
                 _display:
                 ; .FSTART _display
                 ; 0000 0035     unsigned int a, b;
                 ; 0000 0036     b = x % 10;
000122 93ba      	ST   -Y,R27
000123 93aa      	ST   -Y,R26
000124 940e 028d 	CALL __SAVELOCR4
                 ;	x -> Y+4
                 ;	a -> R16,R17
                 ;	b -> R18,R19
000126 81ac      	LDD  R26,Y+4
000127 81bd      	LDD  R27,Y+4+1
000128 e0ea      	LDI  R30,LOW(10)
000129 e0f0      	LDI  R31,HIGH(10)
00012a 940e 028a 	CALL __MODW21U
00012c 019f      	MOVW R18,R30
                 ; 0000 0037     a = x / 10;
00012d 81ac      	LDD  R26,Y+4
00012e 81bd      	LDD  R27,Y+4+1
00012f e0ea      	LDI  R30,LOW(10)
000130 e0f0      	LDI  R31,HIGH(10)
000131 940e 0277 	CALL __DIVW21U
000133 018f      	MOVW R16,R30
                 ; 0000 0038 
                 ; 0000 0039     DK1 = 0;
000134 98a8      	CBI  0x15,0
                 ; 0000 003A     PORTD = number[a];
000135 e6a0      	LDI  R26,LOW(_number)
000136 e0b1      	LDI  R27,HIGH(_number)
000137 0fa0      	ADD  R26,R16
000138 1fb1      	ADC  R27,R17
000139 d112      	RCALL SUBOPT_0x1
                 ; 0000 003B     delay_ms(10);
                 ; 0000 003C     DK1 = 1;
00013a 9aa8      	SBI  0x15,0
                 ; 0000 003D 
                 ; 0000 003E     DK2 = 0;
00013b 98a9      	CBI  0x15,1
                 ; 0000 003F     PORTD = number[b];
00013c e6a0      	LDI  R26,LOW(_number)
00013d e0b1      	LDI  R27,HIGH(_number)
00013e 0fa2      	ADD  R26,R18
00013f 1fb3      	ADC  R27,R19
000140 d10b      	RCALL SUBOPT_0x1
                 ; 0000 0040     delay_ms(10);
                 ; 0000 0041     DK2 = 1;
000141 9aa9      	SBI  0x15,1
                 ; 0000 0042 }
000142 940e 0292 	CALL __LOADLOCR4
000144 9626      	ADIW R28,6
000145 9508      	RET
                 ; .FEND
                 ;
                 ;void displayHumidity(unsigned char hum) {
                 ; 0000 0044 void displayHumidity(unsigned char hum) {
                 _displayHumidity:
                 ; .FSTART _displayHumidity
                 ; 0000 0045     lcd_gotoxy(0,0);
000146 93aa      	ST   -Y,R26
                 ;	hum -> Y+0
000147 e0e0      	LDI  R30,LOW(0)
000148 93ea      	ST   -Y,R30
000149 e0a0      	LDI  R26,LOW(0)
00014a d08d      	RCALL _lcd_gotoxy
                 ; 0000 0046     lcd_putsf("Humidity: ");
                +
00014b e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00014c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00014d d104      	RCALL SUBOPT_0x2
                 ; 0000 0047     readData(hum);
                 ; 0000 0048     lcd_gotoxy(12, 0);
00014e e0ec      	LDI  R30,LOW(12)
00014f 93ea      	ST   -Y,R30
000150 e0a0      	LDI  R26,LOW(0)
000151 d086      	RCALL _lcd_gotoxy
                 ; 0000 0049     lcd_putchar(37);
000152 e2a5      	LDI  R26,LOW(37)
000153 d09b      	RCALL _lcd_putchar
                 ; 0000 004A }
000154 c0ee      	RJMP _0x2020001
                 ; .FEND
                 ;
                 ;void displayTemperature(char temp) {
                 ; 0000 004C void displayTemperature(char temp) {
                 _displayTemperature:
                 ; .FSTART _displayTemperature
                 ; 0000 004D    lcd_gotoxy(0,1);
000155 93aa      	ST   -Y,R26
                 ;	temp -> Y+0
000156 e0e0      	LDI  R30,LOW(0)
000157 93ea      	ST   -Y,R30
000158 e0a1      	LDI  R26,LOW(1)
000159 d07e      	RCALL _lcd_gotoxy
                 ; 0000 004E    lcd_putsf("Temp: ");
                +
00015a e7a1     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
00015b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
00015c d0f5      	RCALL SUBOPT_0x2
                 ; 0000 004F    readData(temp);
                 ; 0000 0050    lcd_gotoxy(8,1);
00015d e0e8      	LDI  R30,LOW(8)
00015e 93ea      	ST   -Y,R30
00015f e0a1      	LDI  R26,LOW(1)
000160 d077      	RCALL _lcd_gotoxy
                 ; 0000 0051    lcd_putchar(223);
000161 edaf      	LDI  R26,LOW(223)
000162 d08c      	RCALL _lcd_putchar
                 ; 0000 0052    lcd_putchar(67);
000163 e4a3      	LDI  R26,LOW(67)
000164 d08a      	RCALL _lcd_putchar
                 ; 0000 0053 }
000165 c0dd      	RJMP _0x2020001
                 ; .FEND
                 ;
                 ;void setTempLimit(void){
                 ; 0000 0055 void setTempLimit(void){
                 _setTempLimit:
                 ; .FSTART _setTempLimit
                 ; 0000 0056    if (PINB.2 == 0) {
000166 99b2      	SBIC 0x16,2
000167 c005      	RJMP _0x44
                 ; 0000 0057      tempLimit++;
000168 94a3      	INC  R10
                 ; 0000 0058      while (PINB.2 == 0) {
                 _0x45:
000169 99b2      	SBIC 0x16,2
00016a c002      	RJMP _0x47
                 ; 0000 0059         display(tempLimit);
00016b d0eb      	RCALL SUBOPT_0x3
                 ; 0000 005A      }
00016c cffc      	RJMP _0x45
                 _0x47:
                 ; 0000 005B    }
                 ; 0000 005C    if (PINB.3 == 0) {
                 _0x44:
00016d 99b3      	SBIC 0x16,3
00016e c005      	RJMP _0x48
                 ; 0000 005D     tempLimit--;
00016f 94aa      	DEC  R10
                 ; 0000 005E     while(PINB.3 == 0) {
                 _0x49:
000170 99b3      	SBIC 0x16,3
000171 c002      	RJMP _0x4B
                 ; 0000 005F        display(tempLimit);
000172 d0e4      	RCALL SUBOPT_0x3
                 ; 0000 0060     }
000173 cffc      	RJMP _0x49
                 _0x4B:
                 ; 0000 0061    }
                 ; 0000 0062 }
                 _0x48:
000174 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0065 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0066 // Input/Output Ports initialization
                 ; 0000 0067 // Port A initialization
                 ; 0000 0068 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0069 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000175 e0e0      	LDI  R30,LOW(0)
000176 bbea      	OUT  0x1A,R30
                 ; 0000 006A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000177 bbeb      	OUT  0x1B,R30
                 ; 0000 006C 
                 ; 0000 006D // Port B initialization
                 ; 0000 006E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
000178 e1e3      	LDI  R30,LOW(19)
000179 bbe7      	OUT  0x17,R30
                 ; 0000 0070 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0071 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
00017a e1ef      	LDI  R30,LOW(31)
00017b bbe8      	OUT  0x18,R30
                 ; 0000 0072 
                 ; 0000 0073 // Port C initialization
                 ; 0000 0074 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0075 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00017c efef      	LDI  R30,LOW(255)
00017d bbe4      	OUT  0x14,R30
                 ; 0000 0076 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0077 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
00017e e0e3      	LDI  R30,LOW(3)
00017f bbe5      	OUT  0x15,R30
                 ; 0000 0078 
                 ; 0000 0079 // Port D initialization
                 ; 0000 007A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007B DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000180 efef      	LDI  R30,LOW(255)
000181 bbe1      	OUT  0x11,R30
                 ; 0000 007C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007D PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
000182 bbe2      	OUT  0x12,R30
                 ; 0000 007E 
                 ; 0000 007F // Timer/Counter 0 initialization
                 ; 0000 0080 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000183 e0e0      	LDI  R30,LOW(0)
000184 bfe3      	OUT  0x33,R30
                 ; 0000 0081 TCNT0=0x00;
000185 bfe2      	OUT  0x32,R30
                 ; 0000 0082 OCR0=0x00;
000186 bfec      	OUT  0x3C,R30
                 ; 0000 0083 
                 ; 0000 0084 // Timer/Counter 1 initialization
                 ; 0000 0085 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000187 bdef      	OUT  0x2F,R30
                 ; 0000 0086 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000188 bdee      	OUT  0x2E,R30
                 ; 0000 0087 TCNT1H=0x00;
000189 bded      	OUT  0x2D,R30
                 ; 0000 0088 TCNT1L=0x00;
00018a bdec      	OUT  0x2C,R30
                 ; 0000 0089 ICR1H=0x00;
00018b bde7      	OUT  0x27,R30
                 ; 0000 008A ICR1L=0x00;
00018c bde6      	OUT  0x26,R30
                 ; 0000 008B OCR1AH=0x00;
00018d bdeb      	OUT  0x2B,R30
                 ; 0000 008C OCR1AL=0x00;
00018e bdea      	OUT  0x2A,R30
                 ; 0000 008D OCR1BH=0x00;
00018f bde9      	OUT  0x29,R30
                 ; 0000 008E OCR1BL=0x00;
000190 bde8      	OUT  0x28,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer/Counter 2 initialization
                 ; 0000 0091 ASSR=0<<AS2;
000191 bde2      	OUT  0x22,R30
                 ; 0000 0092 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000192 bde5      	OUT  0x25,R30
                 ; 0000 0093 TCNT2=0x00;
000193 bde4      	OUT  0x24,R30
                 ; 0000 0094 OCR2=0x00;
000194 bde3      	OUT  0x23,R30
                 ; 0000 0095 
                 ; 0000 0096 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0097 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000195 bfe9      	OUT  0x39,R30
                 ; 0000 0098 
                 ; 0000 0099 // External Interrupt(s) initialization
                 ; 0000 009A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000196 bfe5      	OUT  0x35,R30
                 ; 0000 009B MCUCSR=(0<<ISC2);
000197 bfe4      	OUT  0x34,R30
                 ; 0000 009C 
                 ; 0000 009D UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000198 e8e0      	LDI  R30,LOW(128)
000199 b9ea      	OUT  0xA,R30
                 ; 0000 009E 
                 ; 0000 009F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00019a b9e8      	OUT  0x8,R30
                 ; 0000 00A0 
                 ; 0000 00A1 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00019b eeeb      	LDI  R30,LOW(235)
00019c b9e6      	OUT  0x6,R30
                 ; 0000 00A2 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00019d e0e0      	LDI  R30,LOW(0)
00019e bfe0      	OUT  0x30,R30
                 ; 0000 00A3 
                 ; 0000 00A4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00019f b9ed      	OUT  0xD,R30
                 ; 0000 00A5 
                 ; 0000 00A6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001a0 bfe6      	OUT  0x36,R30
                 ; 0000 00A7 
                 ; 0000 00A8 lcd_init(16);
0001a1 e1a0      	LDI  R26,LOW(16)
0001a2 d076      	RCALL _lcd_init
                 ; 0000 00A9 #asm("sei")
0001a3 9478      	sei
                 ; 0000 00AA 
                 ; 0000 00AB while (1)
                 _0x4C:
                 ; 0000 00AC       {
                 ; 0000 00AD         display(tempLimit);
0001a4 d0b2      	RCALL SUBOPT_0x3
                 ; 0000 00AE         setTempLimit();
0001a5 dfc0      	RCALL _setTempLimit
                 ; 0000 00AF 
                 ; 0000 00B0         readDHT11(&temp,&hum);
0001a6 e0eb      	LDI  R30,LOW(11)
0001a7 e0f0      	LDI  R31,HIGH(11)
0001a8 93fa      	ST   -Y,R31
0001a9 93ea      	ST   -Y,R30
0001aa e0a6      	LDI  R26,LOW(6)
0001ab e0b0      	LDI  R27,HIGH(6)
0001ac df0c      	RCALL _readDHT11
                 ; 0000 00B1         displayHumidity(hum);
0001ad 2da6      	MOV  R26,R6
0001ae df97      	RCALL _displayHumidity
                 ; 0000 00B2         handleHum(hum);
0001af 2da6      	MOV  R26,R6
0001b0 df68      	RCALL _handleHum
                 ; 0000 00B3 
                 ; 0000 00B4         displayTemperature(temp);
0001b1 2dab      	MOV  R26,R11
0001b2 dfa2      	RCALL _displayTemperature
                 ; 0000 00B5         handleTemp(temp, tempLimit);
0001b3 92ba      	ST   -Y,R11
0001b4 2daa      	MOV  R26,R10
0001b5 df4d      	RCALL _handleTemp
                 ; 0000 00B6       }
0001b6 cfed      	RJMP _0x4C
                 ; 0000 00B7 }
                 _0x4F:
0001b7 cfff      	RJMP _0x4F
                 ; .FEND
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001b8 93aa      	ST   -Y,R26
0001b9 b3e5      	IN   R30,0x15
0001ba 70ef      	ANDI R30,LOW(0xF)
0001bb 2fae      	MOV  R26,R30
0001bc 81e8      	LD   R30,Y
0001bd 7fe0      	ANDI R30,LOW(0xF0)
0001be 2bea      	OR   R30,R26
0001bf bbe5      	OUT  0x15,R30
                +
0001c0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001c1 958a     +DEC R24
0001c2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001c3 9aab      	SBI  0x15,3
                +
0001c4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001c5 958a     +DEC R24
0001c6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001c7 98ab      	CBI  0x15,3
                +
0001c8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001c9 958a     +DEC R24
0001ca f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001cb c077      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001cc 93aa      	ST   -Y,R26
0001cd 81a8      	LD   R26,Y
0001ce dfe9      	RCALL __lcd_write_nibble_G100
0001cf 81e8          ld    r30,y
0001d0 95e2          swap  r30
0001d1 83e8          st    y,r30
0001d2 81a8      	LD   R26,Y
0001d3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001d4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001d5 958a     +DEC R24
0001d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001d7 c06b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001d8 93aa      	ST   -Y,R26
0001d9 81e8      	LD   R30,Y
0001da e0f0      	LDI  R31,0
0001db 59e6      	SUBI R30,LOW(-__base_y_G100)
0001dc 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001dd 81e0      	LD   R30,Z
0001de 81a9      	LDD  R26,Y+1
0001df 0fae      	ADD  R26,R30
0001e0 dfeb      	RCALL __lcd_write_data
0001e1 80d9      	LDD  R13,Y+1
0001e2 80c8      	LDD  R12,Y+0
                 _0x2020002:
0001e3 9622      	ADIW R28,2
0001e4 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001e5 e0a2      	LDI  R26,LOW(2)
0001e6 d074      	RCALL SUBOPT_0x4
0001e7 e0ac      	LDI  R26,LOW(12)
0001e8 dfe3      	RCALL __lcd_write_data
0001e9 e0a1      	LDI  R26,LOW(1)
0001ea d070      	RCALL SUBOPT_0x4
0001eb e0e0      	LDI  R30,LOW(0)
0001ec 2ece      	MOV  R12,R30
0001ed 2ede      	MOV  R13,R30
0001ee 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001ef 93aa      	ST   -Y,R26
0001f0 81a8      	LD   R26,Y
0001f1 30aa      	CPI  R26,LOW(0xA)
0001f2 f021      	BREQ _0x2000005
0001f3 91e0 016e 	LDS  R30,__lcd_maxx
0001f5 16de      	CP   R13,R30
0001f6 f048      	BRLO _0x2000004
                 _0x2000005:
0001f7 e0e0      	LDI  R30,LOW(0)
0001f8 93ea      	ST   -Y,R30
0001f9 94c3      	INC  R12
0001fa 2dac      	MOV  R26,R12
0001fb dfdc      	RCALL _lcd_gotoxy
0001fc 81a8      	LD   R26,Y
0001fd 30aa      	CPI  R26,LOW(0xA)
0001fe f409      	BRNE _0x2000007
0001ff c043      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000200 94d3      	INC  R13
000201 9aaa      	SBI  0x15,2
000202 81a8      	LD   R26,Y
000203 dfc8      	RCALL __lcd_write_data
000204 98aa      	CBI  0x15,2
000205 c03d      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000206 93ba      	ST   -Y,R27
000207 93aa      	ST   -Y,R26
000208 931a      	ST   -Y,R17
                 _0x200000B:
000209 81e9      	LDD  R30,Y+1
00020a 81fa      	LDD  R31,Y+1+1
00020b 9631      	ADIW R30,1
00020c 83e9      	STD  Y+1,R30
00020d 83fa      	STD  Y+1+1,R31
00020e 9731      	SBIW R30,1
00020f 91e4      	LPM  R30,Z
000210 2f1e      	MOV  R17,R30
000211 30e0      	CPI  R30,0
000212 f019      	BREQ _0x200000D
000213 2fa1      	MOV  R26,R17
000214 dfda      	RCALL _lcd_putchar
000215 cff3      	RJMP _0x200000B
                 _0x200000D:
000216 8118      	LDD  R17,Y+0
000217 9623      	ADIW R28,3
000218 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000219 93aa      	ST   -Y,R26
00021a b3e4      	IN   R30,0x14
00021b 6fe0      	ORI  R30,LOW(0xF0)
00021c bbe4      	OUT  0x14,R30
00021d 9aa3      	SBI  0x14,3
00021e 9aa2      	SBI  0x14,2
00021f 9aa1      	SBI  0x14,1
000220 98ab      	CBI  0x15,3
000221 98aa      	CBI  0x15,2
000222 98a9      	CBI  0x15,1
000223 81e8      	LD   R30,Y
000224 93e0 016e 	STS  __lcd_maxx,R30
000226 58e0      	SUBI R30,-LOW(128)
                +
000227 93e0 016c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000229 81e8      	LD   R30,Y
00022a 54e0      	SUBI R30,-LOW(192)
                +
00022b 93e0 016d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00022d e1a4      	LDI  R26,LOW(20)
00022e e0b0      	LDI  R27,0
00022f 940e 0267 	CALL _delay_ms
000231 d02e      	RCALL SUBOPT_0x5
000232 d02d      	RCALL SUBOPT_0x5
000233 d02c      	RCALL SUBOPT_0x5
000234 e2a0      	LDI  R26,LOW(32)
000235 df82      	RCALL __lcd_write_nibble_G100
                +
000236 ec88     +LDI R24 , LOW ( 200 )
000237 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000238 9701     +SBIW R24 , 1
000239 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00023a e2a8      	LDI  R26,LOW(40)
00023b df90      	RCALL __lcd_write_data
00023c e0a4      	LDI  R26,LOW(4)
00023d df8e      	RCALL __lcd_write_data
00023e e8a5      	LDI  R26,LOW(133)
00023f df8c      	RCALL __lcd_write_data
000240 e0a6      	LDI  R26,LOW(6)
000241 df8a      	RCALL __lcd_write_data
000242 dfa2      	RCALL _lcd_clear
                 _0x2020001:
000243 9621      	ADIW R28,1
000244 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _number:
000160           	.BYTE 0xA
                 __base_y_G100:
00016a           	.BYTE 0x4
                 __lcd_maxx:
00016e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
000245 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
000246 958a     +DEC R24
000247 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
000248 9473      	INC  R7
000249 e0e2      	LDI  R30,LOW(2)
00024a 15e7      	CP   R30,R7
00024b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00024c 91ec      	LD   R30,X
00024d bbe2      	OUT  0x12,R30
00024e e0aa      	LDI  R26,LOW(10)
00024f e0b0      	LDI  R27,0
000250 940c 0267 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000252 dfb3      	RCALL _lcd_putsf
000253 81a8      	LD   R26,Y
000254 27bb      	CLR  R27
000255 940c 00e8 	JMP  _readData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000257 2daa      	MOV  R26,R10
000258 27bb      	CLR  R27
000259 940c 0122 	JMP  _display
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00025b df70      	RCALL __lcd_write_data
00025c e0a3      	LDI  R26,LOW(3)
00025d e0b0      	LDI  R27,0
00025e 940c 0267 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000260 e3a0      	LDI  R26,LOW(48)
000261 df56      	RCALL __lcd_write_nibble_G100
                +
000262 ec88     +LDI R24 , LOW ( 200 )
000263 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000264 9701     +SBIW R24 , 1
000265 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000266 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000267 9610      	adiw r26,0
000268 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000269 ed80     +LDI R24 , LOW ( 0x7D0 )
00026a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00026b 9701     +SBIW R24 , 1
00026c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00026d 95a8      	wdr
00026e 9711      	sbiw r26,1
00026f f7c9      	brne __delay_ms0
                 __delay_ms1:
000270 9508      	ret
                 
                 __EQW12:
000271 17ea      	CP   R30,R26
000272 07fb      	CPC  R31,R27
000273 e0e1      	LDI  R30,1
000274 f009      	BREQ __EQW12T
000275 27ee      	CLR  R30
                 __EQW12T:
000276 9508      	RET
                 
                 __DIVW21U:
000277 2400      	CLR  R0
000278 2411      	CLR  R1
000279 e190      	LDI  R25,16
                 __DIVW21U1:
00027a 0faa      	LSL  R26
00027b 1fbb      	ROL  R27
00027c 1c00      	ROL  R0
00027d 1c11      	ROL  R1
00027e 1a0e      	SUB  R0,R30
00027f 0a1f      	SBC  R1,R31
000280 f418      	BRCC __DIVW21U2
000281 0e0e      	ADD  R0,R30
000282 1e1f      	ADC  R1,R31
000283 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000284 60a1      	SBR  R26,1
                 __DIVW21U3:
000285 959a      	DEC  R25
000286 f799      	BRNE __DIVW21U1
000287 01fd      	MOVW R30,R26
000288 01d0      	MOVW R26,R0
000289 9508      	RET
                 
                 __MODW21U:
00028a dfec      	RCALL __DIVW21U
00028b 01fd      	MOVW R30,R26
00028c 9508      	RET
                 
                 __SAVELOCR4:
00028d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00028e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00028f 931a      	ST   -Y,R17
000290 930a      	ST   -Y,R16
000291 9508      	RET
                 
                 __LOADLOCR4:
000292 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000293 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000294 8119      	LDD  R17,Y+1
000295 8108      	LD   R16,Y
000296 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   2 r7 :   6 
r8 :   4 r9 :   2 r10:   4 r11:   2 r12:   4 r13:   4 r14:   0 r15:   0 
r16:  13 r17:  12 r18:   4 r19:   5 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  29 r25:   7 r26:  95 r27:  31 r28:   7 r29:   1 r30: 159 r31:  23 
x  :   8 y  :  79 z  :   9 
Registers used: 28 out of 35 (80.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   7 
adiw  :   9 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  18 brpl  :   0 brsh  :   7 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  13 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   2 cpi   :   4 cpse  :   0 dec   :  11 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   6 jmp   :  27 ld    :  20 ldd   :  28 ldi   :  98 
lds   :   1 lpm   :   9 lsl   :   3 lsr   :   0 mov   :  21 movw  :  15 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  43 pop   :   0 push  :   0 rcall :  52 ret   :  19 
reti  :   0 rjmp  :  31 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  14 sbic  :   6 sbis  :   4 sbiw  :   8 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  38 std   :   2 sts   :   3 sub   :   1 subi  :   5 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00052e   1268     58   1326   16384   8.1%
[.dseg] 0x000060 0x00016f      0     15     15    1024   1.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
