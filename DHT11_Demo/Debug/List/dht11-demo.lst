
AVRASM ver. 2.1.30  F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm Thu Oct 28 16:31:38 2021

F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1089): warning: Register r4 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1091): warning: Register r8 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1092): warning: Register r9 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1093): warning: Register r6 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1094): warning: Register r11 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1095): warning: Register r10 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1096): warning: Register r13 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _bit_count=R5
                 	.DEF _c=R4
                 	.DEF _cl=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _hum=R6
                 	.DEF _temp=R11
                 	.DEF _tempLimit=R10
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0014      	.DB  0x0,0x0,0x14,0x0
                 
                 _0x24:
00002e f9c0
00002f b0a4
000030 9299
000031 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000032 9080      	.DB  0x80,0x90
                 _0x0:
000033 7548
000034 696d
000035 6964
000036 7974      	.DB  0x48,0x75,0x6D,0x69,0x64,0x69,0x74,0x79
000037 203a
000038 5400
000039 6d65
00003a 3a70      	.DB  0x3A,0x20,0x0,0x54,0x65,0x6D,0x70,0x3A
00003b 0020
00003c 6574
00003d 706d
00003e 7420      	.DB  0x20,0x0,0x74,0x65,0x6D,0x70,0x20,0x74
00003f 6f6f
000040 6820
000041 6769
000042 0068      	.DB  0x6F,0x6F,0x20,0x68,0x69,0x67,0x68,0x0
000043 6574
000044 706d
000045 7420
000046 6f6f      	.DB  0x74,0x65,0x6D,0x70,0x20,0x74,0x6F,0x6F
000047 6c20
000048 776f
F:\Electronics\AVR\DHT11_Demo\Debug\List\dht11-demo.asm(1142): warning: .cseg .db misalignment - padding zero byte
000049 0000      	.DB  0x20,0x6C,0x6F,0x77,0x0
                 _0x2000003:
00004a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004b 0008      	.DW  0x08
00004c 0004      	.DW  0x04
00004d 0054      	.DW  __REG_VARS*2
                 
00004e 000a      	.DW  0x0A
00004f 017b      	.DW  _number
000050 005c      	.DW  _0x24*2
                 
000051 000e      	.DW  0x0E
000052 0160      	.DW  _0x55
000053 0078      	.DW  _0x0*2+18
                 
000054 000d      	.DW  0x0D
000055 016e      	.DW  _0x55+14
000056 0086      	.DW  _0x0*2+32
                 
000057 0002      	.DW  0x02
000058 0185      	.DW  __base_y_G100
000059 0094      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bffb      	OUT  GICR,R31
000060 bfeb      	OUT  GICR,R30
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 01a6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;#define SPIN A.0
                 ;#include <DHT11/DHT11.h>
                 ;
                 ;#define DDRV DDR SPIN
                 ;#define OUT_PIN PORT SPIN
                 ;#define IN_PIN PIN SPIN
                 ;#define setDHT11Pin(x) # define IN_PIN x
                 ;
                 ;
                 ;
                 ;// count bit
                 ;unsigned char bit_count = 0;
                 ;// feedback count bit return
                 ;unsigned char c = 0;
                 ;// temperature and humidity value
                 ;
                 ;// loop count
                 ;unsigned char cl = 0;
                 ;
                 ;//***** start methods *****//
                 ;
                 ;void request(void)
                 ; 0000 0006 {
                 
                 	.CSEG
                 _request:
                 ; .FSTART _request
                 ;    DDRV = 1;
000088 9ad0      	SBI  0x1A,0
                 ;    // DDRD |= (1<<0);
                 ;
                 ;    OUT_PIN = 0;
000089 98d8      	CBI  0x1B,0
                 ;    // PORTD &= ~(1<<0);
                 ;
                 ;    // delay_ms(18);
                 ;    delay_ms(18);
00008a e1a2      	LDI  R26,LOW(18)
00008b e0b0      	LDI  R27,0
00008c 940e 02ae 	CALL _delay_ms
                 ;
                 ;    OUT_PIN = 1;
00008e 9ad8      	SBI  0x1B,0
                 ;    // PORTD |= (1<<0);
                 ;}
00008f 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void response()
                 ;{
                 _response:
                 ; .FSTART _response
                 ;    // PIND
                 ;    //DDRD &= ~(1<<0);
                 ;    DDRV = 0;
000090 98d0      	CBI  0x1A,0
                 ;
                 ;    while(IN_PIN)
                 _0xB:
000091 9bc8      	SBIS 0x19,0
000092 c007      	RJMP _0xD
                 ;    {
                 ;        delay_us(1);
                +
000093 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000094 958a     +DEC R24
000095 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ;        cl++;
000096 9473      	INC  R7
                 ;        if (cl > 80) break;
000097 e5e0      	LDI  R30,LOW(80)
000098 15e7      	CP   R30,R7
000099 f7b8      	BRSH _0xB
                 ;    }
                 _0xD:
                 ;
                 ;    cl = 0;
00009a 2477      	CLR  R7
                 ;    while(IN_PIN==0)
                 _0xF:
00009b 99c8      	SBIC 0x19,0
00009c c003      	RJMP _0x11
                 ;    {
                 ;        delay_us(40);
00009d 940e 0288 	CALL SUBOPT_0x0
                 ;        cl++;
                 ;        if (cl > 2) break;
00009f f7d8      	BRSH _0xF
                 ;    }
                 _0x11:
                 ;
                 ;    cl = 0;
0000a0 2477      	CLR  R7
                 ;    while(IN_PIN)
                 _0x13:
0000a1 9bc8      	SBIS 0x19,0
0000a2 c003      	RJMP _0x15
                 ;    {
                 ;        delay_us(40);
0000a3 940e 0288 	CALL SUBOPT_0x0
                 ;        cl++;
                 ;        if (cl > 2) break;
0000a5 f7d8      	BRSH _0x13
                 ;    }
                 _0x15:
                 ;}
0000a6 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;int i;
                 ;unsigned char recive()
                 ;{
                 _recive:
                 ; .FSTART _recive
                 ;    while(bit_count<8)
                 _0x17:
0000a7 e0e8      	LDI  R30,LOW(8)
0000a8 165e      	CP   R5,R30
0000a9 f500      	BRSH _0x19
                 ;    {
                 ;        bit_count++;
0000aa 9453      	INC  R5
                 ;
                 ;        while(IN_PIN==0);
                 _0x1A:
0000ab 9bc8      	SBIS 0x19,0
0000ac cffe      	RJMP _0x1A
                 ;
                 ;        delay_us(30);
                +
0000ad e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000ae 958a     +DEC R24
0000af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ;
                 ;        if(IN_PIN)
0000b0 9bc8      	SBIS 0x19,0
0000b1 c005      	RJMP _0x1D
                 ;        {
                 ;            c=(c<<1)|(0x01);
0000b2 2de4      	MOV  R30,R4
0000b3 0fee      	LSL  R30
0000b4 60e1      	ORI  R30,1
0000b5 2e4e      	MOV  R4,R30
                 ;        } else {
0000b6 c001      	RJMP _0x1E
                 _0x1D:
                 ;            c=c<<1;
0000b7 0c44      	LSL  R4
                 ;        }
                 _0x1E:
                 ;
                 ;        for (i=0;((i<1000) && IN_PIN);i++){delay_us(10);};
0000b8 2488      	CLR  R8
0000b9 2499      	CLR  R9
                 _0x20:
0000ba eee8      	LDI  R30,LOW(1000)
0000bb e0f3      	LDI  R31,HIGH(1000)
0000bc 168e      	CP   R8,R30
0000bd 069f      	CPC  R9,R31
0000be f414      	BRGE _0x22
0000bf 99c8      	SBIC 0x19,0
0000c0 c001      	RJMP _0x23
                 _0x22:
0000c1 c007      	RJMP _0x21
                 _0x23:
                +
0000c2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000c3 958a     +DEC R24
0000c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000c5 01f4      	MOVW R30,R8
0000c6 9631      	ADIW R30,1
0000c7 014f      	MOVW R8,R30
0000c8 cff1      	RJMP _0x20
                 _0x21:
                 ;
                 ;        // while(IN_PIN);
                 ;    }
0000c9 cfdd      	RJMP _0x17
                 _0x19:
                 ;
                 ;    bit_count=0;
0000ca 2455      	CLR  R5
                 ;
                 ;    return c;
0000cb 2de4      	MOV  R30,R4
0000cc 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;unsigned char readDHT11(char *temp,unsigned char *hum){
                 _readDHT11:
                 ; .FSTART _readDHT11
                 ;    unsigned char  d_rh, d_temp, check;
                 ;    request();
0000cd 93ba      	ST   -Y,R27
0000ce 93aa      	ST   -Y,R26
0000cf 940e 02d4 	CALL __SAVELOCR4
                 ;	*temp -> Y+6
                 ;	*hum -> Y+4
                 ;	d_rh -> R17
                 ;	d_temp -> R16
                 ;	check -> R19
0000d1 dfb6      	RCALL _request
                 ;    response();
0000d2 dfbd      	RCALL _response
                 ;    *hum   = recive();
0000d3 dfd3      	RCALL _recive
0000d4 81ac      	LDD  R26,Y+4
0000d5 81bd      	LDD  R27,Y+4+1
0000d6 93ec      	ST   X,R30
                 ;    d_rh   = recive();
0000d7 dfcf      	RCALL _recive
0000d8 2f1e      	MOV  R17,R30
                 ;    *temp = (char)recive();
0000d9 dfcd      	RCALL _recive
0000da 81ae      	LDD  R26,Y+6
0000db 81bf      	LDD  R27,Y+6+1
0000dc 93ec      	ST   X,R30
                 ;    d_temp = recive();
0000dd dfc9      	RCALL _recive
0000de 2f0e      	MOV  R16,R30
                 ;    check  = recive();
0000df dfc7      	RCALL _recive
0000e0 2f3e      	MOV  R19,R30
                 ;
                 ;
                 ;
                 ;   return ((*hum  + d_rh + *temp + d_temp) == check) ;
0000e1 81ac      	LDD  R26,Y+4
0000e2 81bd      	LDD  R27,Y+4+1
0000e3 91ac      	LD   R26,X
0000e4 27bb      	CLR  R27
0000e5 2fe1      	MOV  R30,R17
0000e6 e0f0      	LDI  R31,0
0000e7 0fea      	ADD  R30,R26
0000e8 1ffb      	ADC  R31,R27
0000e9 010f      	MOVW R0,R30
0000ea 81ae      	LDD  R26,Y+6
0000eb 81bf      	LDD  R27,Y+6+1
0000ec 91ec      	LD   R30,X
0000ed e0f0      	LDI  R31,0
0000ee 01d0      	MOVW R26,R0
0000ef 0fae      	ADD  R26,R30
0000f0 1fbf      	ADC  R27,R31
0000f1 27ee      	CLR  R30
0000f2 0fa0      	ADD  R26,R16
0000f3 1fbe      	ADC  R27,R30
0000f4 2fe3      	MOV  R30,R19
0000f5 e0f0      	LDI  R31,0
0000f6 940e 02b8 	CALL __EQW12
0000f8 940e 02d9 	CALL __LOADLOCR4
0000fa 9628      	ADIW R28,8
0000fb 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;#define DK1 PORTC.0
                 ;#define DK2 PORTC.1
                 ;
                 ;unsigned char hum = 0;
                 ;char temp = 0;
                 ;
                 ;unsigned char tempLimit = 20;
                 ;
                 ;unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
                 
                 	.DSEG
                 ;
                 ;void readData(unsigned int number) {
                 ; 0000 0012 void readData(unsigned int number) {
                 
                 	.CSEG
                 _readData:
                 ; .FSTART _readData
                 ; 0000 0013     unsigned int x;
                 ; 0000 0014     x = number;
0000fc 93ba      	ST   -Y,R27
0000fd 93aa      	ST   -Y,R26
0000fe 931a      	ST   -Y,R17
0000ff 930a      	ST   -Y,R16
                 ;	number -> Y+2
                 ;	x -> R16,R17
                +
000100 810a     +LDD R16 , Y + 2
000101 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
                 ; 0000 0015     lcd_putchar(x / 10 + 48);
000102 01d8      	MOVW R26,R16
000103 e0ea      	LDI  R30,LOW(10)
000104 e0f0      	LDI  R31,HIGH(10)
000105 940e 02be 	CALL __DIVW21U
000107 5de0      	SUBI R30,-LOW(48)
000108 2fae      	MOV  R26,R30
000109 d119      	RCALL _lcd_putchar
                 ; 0000 0016     x = x % 10;
00010a 01d8      	MOVW R26,R16
00010b e0ea      	LDI  R30,LOW(10)
00010c e0f0      	LDI  R31,HIGH(10)
00010d 940e 02d1 	CALL __MODW21U
00010f 018f      	MOVW R16,R30
                 ; 0000 0017     lcd_putchar(x + 48);
000110 2fa0      	MOV  R26,R16
000111 5da0      	SUBI R26,-LOW(48)
000112 d110      	RCALL _lcd_putchar
                 ; 0000 0018 }
000113 8119      	LDD  R17,Y+1
000114 8108      	LDD  R16,Y+0
000115 9624      	ADIW R28,4
000116 9508      	RET
                 ; .FEND
                 ;
                 ;void handleTemp(char temp, unsigned char tempLimit) {
                 ; 0000 001A void handleTemp(char temp, unsigned char tempLimit) {
                 _handleTemp:
                 ; .FSTART _handleTemp
                 ; 0000 001B      if (temp < tempLimit) {
000117 93aa      	ST   -Y,R26
                 ;	temp -> Y+1
                 ;	tempLimit -> Y+0
000118 81e8      	LD   R30,Y
000119 81a9      	LDD  R26,Y+1
00011a 17ae      	CP   R26,R30
00011b f418      	BRSH _0x25
                 ; 0000 001C         PORTB.0 = 0;
00011c 98c0      	CBI  0x18,0
                 ; 0000 001D         PORTB.1 = 1;
00011d 9ac1      	SBI  0x18,1
                 ; 0000 001E      }
                 ; 0000 001F      else if (temp == tempLimit) {
00011e c00d      	RJMP _0x2A
                 _0x25:
00011f 81e8      	LD   R30,Y
000120 81a9      	LDD  R26,Y+1
000121 17ea      	CP   R30,R26
000122 f419      	BRNE _0x2B
                 ; 0000 0020         PORTB.0 = 1;
000123 9ac0      	SBI  0x18,0
                 ; 0000 0021         PORTB.1 = 1;
000124 9ac1      	SBI  0x18,1
                 ; 0000 0022      }
                 ; 0000 0023      else if (temp > tempLimit) {
000125 c006      	RJMP _0x30
                 _0x2B:
000126 81e8      	LD   R30,Y
000127 81a9      	LDD  R26,Y+1
000128 17ea      	CP   R30,R26
000129 f410      	BRSH _0x31
                 ; 0000 0024         PORTB.0 = 1;
00012a 9ac0      	SBI  0x18,0
                 ; 0000 0025         PORTB.1 = 0;
00012b 98c1      	CBI  0x18,1
                 ; 0000 0026      }
                 ; 0000 0027 }
                 _0x31:
                 _0x30:
                 _0x2A:
00012c c0ea      	RJMP _0x2020003
                 ; .FEND
                 ;
                 ;void warningTemp() {
                 ; 0000 0029 void warningTemp() {
                 _warningTemp:
                 ; .FSTART _warningTemp
                 ; 0000 002A     if (temp >= 40) {
00012d e2e8      	LDI  R30,LOW(40)
00012e 16be      	CP   R11,R30
00012f f010      	BRLO _0x36
                 ; 0000 002B         PORTB.5 = 0;
000130 98c5      	CBI  0x18,5
                 ; 0000 002C         PORTB.6 = 1;
000131 c007      	RJMP _0x63
                 ; 0000 002D     }
                 ; 0000 002E     else if (temp <= 10) {
                 _0x36:
000132 e0ea      	LDI  R30,LOW(10)
000133 15eb      	CP   R30,R11
000134 f018      	BRLO _0x3C
                 ; 0000 002F         PORTB.5 = 1;
000135 9ac5      	SBI  0x18,5
                 ; 0000 0030         PORTB.6 = 0;
000136 98c6      	CBI  0x18,6
                 ; 0000 0031     }
                 ; 0000 0032     else {
000137 c002      	RJMP _0x41
                 _0x3C:
                 ; 0000 0033        PORTB.5 = 1;
000138 9ac5      	SBI  0x18,5
                 ; 0000 0034        PORTB.6 = 1;
                 _0x63:
000139 9ac6      	SBI  0x18,6
                 ; 0000 0035     }
                 _0x41:
                 ; 0000 0036 }
00013a 9508      	RET
                 ; .FEND
                 ;
                 ;void handleHum(unsigned char hum) {
                 ; 0000 0038 void handleHum(unsigned char hum) {
                 _handleHum:
                 ; .FSTART _handleHum
                 ; 0000 0039     if (hum < 80)
00013b 93aa      	ST   -Y,R26
                 ;	hum -> Y+0
00013c 81a8      	LD   R26,Y
00013d 35a0      	CPI  R26,LOW(0x50)
00013e f410      	BRSH _0x46
                 ; 0000 003A     {
                 ; 0000 003B         PORTB.4 = 0;
00013f 98c4      	CBI  0x18,4
                 ; 0000 003C     }
                 ; 0000 003D     else
000140 c001      	RJMP _0x49
                 _0x46:
                 ; 0000 003E     {
                 ; 0000 003F         PORTB.4 = 1;
000141 9ac4      	SBI  0x18,4
                 ; 0000 0040     }
                 _0x49:
                 ; 0000 0041 }
000142 940c 0286 	JMP  _0x2020001
                 ; .FEND
                 ;
                 ;void display(unsigned int x) {
                 ; 0000 0043 void display(unsigned int x) {
                 _display:
                 ; .FSTART _display
                 ; 0000 0044     unsigned int a, b;
                 ; 0000 0045     b = x % 10;
000144 93ba      	ST   -Y,R27
000145 93aa      	ST   -Y,R26
000146 940e 02d4 	CALL __SAVELOCR4
                 ;	x -> Y+4
                 ;	a -> R16,R17
                 ;	b -> R18,R19
000148 81ac      	LDD  R26,Y+4
000149 81bd      	LDD  R27,Y+4+1
00014a e0ea      	LDI  R30,LOW(10)
00014b e0f0      	LDI  R31,HIGH(10)
00014c 940e 02d1 	CALL __MODW21U
00014e 019f      	MOVW R18,R30
                 ; 0000 0046     a = x / 10;
00014f 81ac      	LDD  R26,Y+4
000150 81bd      	LDD  R27,Y+4+1
000151 e0ea      	LDI  R30,LOW(10)
000152 e0f0      	LDI  R31,HIGH(10)
000153 940e 02be 	CALL __DIVW21U
000155 018f      	MOVW R16,R30
                 ; 0000 0047 
                 ; 0000 0048     DK1 = 0;
000156 98a8      	CBI  0x15,0
                 ; 0000 0049     PORTD = number[a];
000157 e7ab      	LDI  R26,LOW(_number)
000158 e0b1      	LDI  R27,HIGH(_number)
000159 0fa0      	ADD  R26,R16
00015a 1fb1      	ADC  R27,R17
00015b d133      	RCALL SUBOPT_0x1
                 ; 0000 004A     delay_ms(10);
                 ; 0000 004B     DK1 = 1;
00015c 9aa8      	SBI  0x15,0
                 ; 0000 004C 
                 ; 0000 004D     DK2 = 0;
00015d 98a9      	CBI  0x15,1
                 ; 0000 004E     PORTD = number[b];
00015e e7ab      	LDI  R26,LOW(_number)
00015f e0b1      	LDI  R27,HIGH(_number)
000160 0fa2      	ADD  R26,R18
000161 1fb3      	ADC  R27,R19
000162 d12c      	RCALL SUBOPT_0x1
                 ; 0000 004F     delay_ms(10);
                 ; 0000 0050     DK2 = 1;
000163 9aa9      	SBI  0x15,1
                 ; 0000 0051 }
000164 940e 02d9 	CALL __LOADLOCR4
000166 9626      	ADIW R28,6
000167 9508      	RET
                 ; .FEND
                 ;
                 ;void displayHumidity(unsigned char hum) {
                 ; 0000 0053 void displayHumidity(unsigned char hum) {
                 _displayHumidity:
                 ; .FSTART _displayHumidity
                 ; 0000 0054     lcd_gotoxy(0,0);
000168 93aa      	ST   -Y,R26
                 ;	hum -> Y+0
000169 d12b      	RCALL SUBOPT_0x2
                 ; 0000 0055     lcd_putsf("Humidity: ");
                +
00016a e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00016b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00016c d12c      	RCALL SUBOPT_0x3
                 ; 0000 0056     readData(hum);
                 ; 0000 0057     lcd_gotoxy(12, 0);
00016d e0ec      	LDI  R30,LOW(12)
00016e 93ea      	ST   -Y,R30
00016f e0a0      	LDI  R26,LOW(0)
000170 d09b      	RCALL _lcd_gotoxy
                 ; 0000 0058     lcd_putchar(37);
000171 e2a5      	LDI  R26,LOW(37)
000172 d0b0      	RCALL _lcd_putchar
                 ; 0000 0059 }
000173 c112      	RJMP _0x2020001
                 ; .FEND
                 ;
                 ;void displayTemperature(char temp) {
                 ; 0000 005B void displayTemperature(char temp) {
                 _displayTemperature:
                 ; .FSTART _displayTemperature
                 ; 0000 005C    lcd_gotoxy(0,1);
000174 93aa      	ST   -Y,R26
                 ;	temp -> Y+0
000175 e0e0      	LDI  R30,LOW(0)
000176 93ea      	ST   -Y,R30
000177 e0a1      	LDI  R26,LOW(1)
000178 d093      	RCALL _lcd_gotoxy
                 ; 0000 005D    lcd_putsf("Temp: ");
                +
000179 e7a1     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
00017a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
00017b d11d      	RCALL SUBOPT_0x3
                 ; 0000 005E    readData(temp);
                 ; 0000 005F    lcd_gotoxy(8,1);
00017c e0e8      	LDI  R30,LOW(8)
00017d 93ea      	ST   -Y,R30
00017e e0a1      	LDI  R26,LOW(1)
00017f d08c      	RCALL _lcd_gotoxy
                 ; 0000 0060    lcd_putchar(223);
000180 edaf      	LDI  R26,LOW(223)
000181 d0a1      	RCALL _lcd_putchar
                 ; 0000 0061    lcd_putchar(67);
000182 e4a3      	LDI  R26,LOW(67)
000183 d09f      	RCALL _lcd_putchar
                 ; 0000 0062 }
000184 c101      	RJMP _0x2020001
                 ; .FEND
                 ;
                 ;void displayWarning(char temp) {
                 ; 0000 0064 void displayWarning(char temp) {
                 _displayWarning:
                 ; .FSTART _displayWarning
                 ; 0000 0065     if (temp >= 40 ) {
000185 93aa      	ST   -Y,R26
                 ;	temp -> Y+0
000186 81a8      	LD   R26,Y
000187 32a8      	CPI  R26,LOW(0x28)
000188 f028      	BRLO _0x54
                 ; 0000 0066         lcd_clear();
000189 d08f      	RCALL _lcd_clear
                 ; 0000 0067         lcd_gotoxy(0,0);
00018a d10a      	RCALL SUBOPT_0x2
                 ; 0000 0068         lcd_puts("temp too high");
                +
00018b e6a0     +LDI R26 , LOW ( _0x55 + ( 0 ) )
00018c e0b1     +LDI R27 , HIGH ( _0x55 + ( 0 ) )
                 	__POINTW2MN _0x55,0
00018d d0ac      	RCALL _lcd_puts
                 ; 0000 0069     }
                 ; 0000 006A     if (temp <= 10) {
                 _0x54:
00018e 81a8      	LD   R26,Y
00018f 30ab      	CPI  R26,LOW(0xB)
000190 f428      	BRSH _0x56
                 ; 0000 006B        lcd_clear();
000191 d087      	RCALL _lcd_clear
                 ; 0000 006C         lcd_gotoxy(0,0);
000192 d102      	RCALL SUBOPT_0x2
                 ; 0000 006D         lcd_puts("temp too low");
                +
000193 e6ae     +LDI R26 , LOW ( _0x55 + ( 14 ) )
000194 e0b1     +LDI R27 , HIGH ( _0x55 + ( 14 ) )
                 	__POINTW2MN _0x55,14
000195 d0a4      	RCALL _lcd_puts
                 ; 0000 006E     }
                 ; 0000 006F }
                 _0x56:
000196 c0ef      	RJMP _0x2020001
                 ; .FEND
                 
                 	.DSEG
                 _0x55:
000160           	.BYTE 0x1B
                 ;
                 ;void setTempLimit(void){
                 ; 0000 0071 void setTempLimit(void){
                 
                 	.CSEG
                 _setTempLimit:
                 ; .FSTART _setTempLimit
                 ; 0000 0072    if (PINB.2 == 0) {
000197 99b2      	SBIC 0x16,2
000198 c005      	RJMP _0x57
                 ; 0000 0073      tempLimit++;
000199 94a3      	INC  R10
                 ; 0000 0074      while (PINB.2 == 0) {
                 _0x58:
00019a 99b2      	SBIC 0x16,2
00019b c002      	RJMP _0x5A
                 ; 0000 0075         display(tempLimit);
00019c d101      	RCALL SUBOPT_0x4
                 ; 0000 0076      }
00019d cffc      	RJMP _0x58
                 _0x5A:
                 ; 0000 0077    }
                 ; 0000 0078    if (PINB.3 == 0) {
                 _0x57:
00019e 99b3      	SBIC 0x16,3
00019f c005      	RJMP _0x5B
                 ; 0000 0079     tempLimit--;
0001a0 94aa      	DEC  R10
                 ; 0000 007A     while(PINB.3 == 0) {
                 _0x5C:
0001a1 99b3      	SBIC 0x16,3
0001a2 c002      	RJMP _0x5E
                 ; 0000 007B        display(tempLimit);
0001a3 d0fa      	RCALL SUBOPT_0x4
                 ; 0000 007C     }
0001a4 cffc      	RJMP _0x5C
                 _0x5E:
                 ; 0000 007D    }
                 ; 0000 007E }
                 _0x5B:
0001a5 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0081 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0082 // Input/Output Ports initialization
                 ; 0000 0083 // Port A initialization
                 ; 0000 0084 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0085 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0001a6 e0e0      	LDI  R30,LOW(0)
0001a7 bbea      	OUT  0x1A,R30
                 ; 0000 0086 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0087 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0001a8 bbeb      	OUT  0x1B,R30
                 ; 0000 0088 
                 ; 0000 0089 // Port B initialization
                 ; 0000 008A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 008B DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
0001a9 efe3      	LDI  R30,LOW(243)
0001aa bbe7      	OUT  0x17,R30
                 ; 0000 008C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 008D PORTB=(0<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
0001ab e7ef      	LDI  R30,LOW(127)
0001ac bbe8      	OUT  0x18,R30
                 ; 0000 008E 
                 ; 0000 008F // Port C initialization
                 ; 0000 0090 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0091 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0001ad efef      	LDI  R30,LOW(255)
0001ae bbe4      	OUT  0x14,R30
                 ; 0000 0092 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0093 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
0001af e0e3      	LDI  R30,LOW(3)
0001b0 bbe5      	OUT  0x15,R30
                 ; 0000 0094 
                 ; 0000 0095 // Port D initialization
                 ; 0000 0096 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0097 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0001b1 efef      	LDI  R30,LOW(255)
0001b2 bbe1      	OUT  0x11,R30
                 ; 0000 0098 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0099 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
0001b3 bbe2      	OUT  0x12,R30
                 ; 0000 009A 
                 ; 0000 009B // Timer/Counter 0 initialization
                 ; 0000 009C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 bfe3      	OUT  0x33,R30
                 ; 0000 009D TCNT0=0x00;
0001b6 bfe2      	OUT  0x32,R30
                 ; 0000 009E OCR0=0x00;
0001b7 bfec      	OUT  0x3C,R30
                 ; 0000 009F 
                 ; 0000 00A0 // Timer/Counter 1 initialization
                 ; 0000 00A1 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0001b8 bdef      	OUT  0x2F,R30
                 ; 0000 00A2 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0001b9 bdee      	OUT  0x2E,R30
                 ; 0000 00A3 TCNT1H=0x00;
0001ba bded      	OUT  0x2D,R30
                 ; 0000 00A4 TCNT1L=0x00;
0001bb bdec      	OUT  0x2C,R30
                 ; 0000 00A5 ICR1H=0x00;
0001bc bde7      	OUT  0x27,R30
                 ; 0000 00A6 ICR1L=0x00;
0001bd bde6      	OUT  0x26,R30
                 ; 0000 00A7 OCR1AH=0x00;
0001be bdeb      	OUT  0x2B,R30
                 ; 0000 00A8 OCR1AL=0x00;
0001bf bdea      	OUT  0x2A,R30
                 ; 0000 00A9 OCR1BH=0x00;
0001c0 bde9      	OUT  0x29,R30
                 ; 0000 00AA OCR1BL=0x00;
0001c1 bde8      	OUT  0x28,R30
                 ; 0000 00AB 
                 ; 0000 00AC // Timer/Counter 2 initialization
                 ; 0000 00AD ASSR=0<<AS2;
0001c2 bde2      	OUT  0x22,R30
                 ; 0000 00AE TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001c3 bde5      	OUT  0x25,R30
                 ; 0000 00AF TCNT2=0x00;
0001c4 bde4      	OUT  0x24,R30
                 ; 0000 00B0 OCR2=0x00;
0001c5 bde3      	OUT  0x23,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00B3 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0001c6 bfe9      	OUT  0x39,R30
                 ; 0000 00B4 
                 ; 0000 00B5 // External Interrupt(s) initialization
                 ; 0000 00B6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001c7 bfe5      	OUT  0x35,R30
                 ; 0000 00B7 MCUCSR=(0<<ISC2);
0001c8 bfe4      	OUT  0x34,R30
                 ; 0000 00B8 
                 ; 0000 00B9 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001c9 e8e0      	LDI  R30,LOW(128)
0001ca b9ea      	OUT  0xA,R30
                 ; 0000 00BA 
                 ; 0000 00BB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001cb b9e8      	OUT  0x8,R30
                 ; 0000 00BC 
                 ; 0000 00BD ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0001cc eeeb      	LDI  R30,LOW(235)
0001cd b9e6      	OUT  0x6,R30
                 ; 0000 00BE SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0001ce e0e0      	LDI  R30,LOW(0)
0001cf bfe0      	OUT  0x30,R30
                 ; 0000 00BF 
                 ; 0000 00C0 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001d0 b9ed      	OUT  0xD,R30
                 ; 0000 00C1 
                 ; 0000 00C2 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001d1 bfe6      	OUT  0x36,R30
                 ; 0000 00C3 
                 ; 0000 00C4 lcd_init(16);
0001d2 e1a0      	LDI  R26,LOW(16)
0001d3 d088      	RCALL _lcd_init
                 ; 0000 00C5 #asm("sei")
0001d4 9478      	sei
                 ; 0000 00C6 
                 ; 0000 00C7 while (1) {
                 _0x5F:
                 ; 0000 00C8         display(tempLimit);
0001d5 d0c8      	RCALL SUBOPT_0x4
                 ; 0000 00C9         setTempLimit();
0001d6 dfc0      	RCALL _setTempLimit
                 ; 0000 00CA 
                 ; 0000 00CB         readDHT11(&temp,&hum);
0001d7 e0eb      	LDI  R30,LOW(11)
0001d8 e0f0      	LDI  R31,HIGH(11)
0001d9 93fa      	ST   -Y,R31
0001da 93ea      	ST   -Y,R30
0001db e0a6      	LDI  R26,LOW(6)
0001dc e0b0      	LDI  R27,HIGH(6)
0001dd deef      	RCALL _readDHT11
                 ; 0000 00CC         displayHumidity(hum);
0001de 2da6      	MOV  R26,R6
0001df df88      	RCALL _displayHumidity
                 ; 0000 00CD         handleHum(hum);
0001e0 2da6      	MOV  R26,R6
0001e1 df59      	RCALL _handleHum
                 ; 0000 00CE 
                 ; 0000 00CF         displayTemperature(temp);
0001e2 2dab      	MOV  R26,R11
0001e3 df90      	RCALL _displayTemperature
                 ; 0000 00D0         handleTemp(temp, tempLimit);
0001e4 92ba      	ST   -Y,R11
0001e5 2daa      	MOV  R26,R10
0001e6 df30      	RCALL _handleTemp
                 ; 0000 00D1         warningTemp();
0001e7 df45      	RCALL _warningTemp
                 ; 0000 00D2         displayWarning(temp);
0001e8 2dab      	MOV  R26,R11
0001e9 df9b      	RCALL _displayWarning
                 ; 0000 00D3       }
0001ea cfea      	RJMP _0x5F
                 ; 0000 00D4 }
                 _0x62:
0001eb cfff      	RJMP _0x62
                 ; .FEND
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001ec 93aa      	ST   -Y,R26
0001ed b3e5      	IN   R30,0x15
0001ee 70ef      	ANDI R30,LOW(0xF)
0001ef 2fae      	MOV  R26,R30
0001f0 81e8      	LD   R30,Y
0001f1 7fe0      	ANDI R30,LOW(0xF0)
0001f2 2bea      	OR   R30,R26
0001f3 bbe5      	OUT  0x15,R30
                +
0001f4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001f5 958a     +DEC R24
0001f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001f7 9aab      	SBI  0x15,3
                +
0001f8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001f9 958a     +DEC R24
0001fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001fb 98ab      	CBI  0x15,3
                +
0001fc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001fd 958a     +DEC R24
0001fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ff c086      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000200 93aa      	ST   -Y,R26
000201 81a8      	LD   R26,Y
000202 dfe9      	RCALL __lcd_write_nibble_G100
000203 81e8          ld    r30,y
000204 95e2          swap  r30
000205 83e8          st    y,r30
000206 81a8      	LD   R26,Y
000207 dfe4      	RCALL __lcd_write_nibble_G100
                +
000208 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000209 958a     +DEC R24
00020a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00020b c07a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00020c 93aa      	ST   -Y,R26
00020d 81e8      	LD   R30,Y
00020e e0f0      	LDI  R31,0
00020f 57eb      	SUBI R30,LOW(-__base_y_G100)
000210 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000211 81e0      	LD   R30,Z
000212 81a9      	LDD  R26,Y+1
000213 0fae      	ADD  R26,R30
000214 dfeb      	RCALL __lcd_write_data
000215 80d9      	LDD  R13,Y+1
000216 80c8      	LDD  R12,Y+0
                 _0x2020003:
000217 9622      	ADIW R28,2
000218 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000219 e0a2      	LDI  R26,LOW(2)
00021a d087      	RCALL SUBOPT_0x5
00021b e0ac      	LDI  R26,LOW(12)
00021c dfe3      	RCALL __lcd_write_data
00021d e0a1      	LDI  R26,LOW(1)
00021e d083      	RCALL SUBOPT_0x5
00021f e0e0      	LDI  R30,LOW(0)
000220 2ece      	MOV  R12,R30
000221 2ede      	MOV  R13,R30
000222 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000223 93aa      	ST   -Y,R26
000224 81a8      	LD   R26,Y
000225 30aa      	CPI  R26,LOW(0xA)
000226 f021      	BREQ _0x2000005
000227 91e0 0189 	LDS  R30,__lcd_maxx
000229 16de      	CP   R13,R30
00022a f048      	BRLO _0x2000004
                 _0x2000005:
00022b e0e0      	LDI  R30,LOW(0)
00022c 93ea      	ST   -Y,R30
00022d 94c3      	INC  R12
00022e 2dac      	MOV  R26,R12
00022f dfdc      	RCALL _lcd_gotoxy
000230 81a8      	LD   R26,Y
000231 30aa      	CPI  R26,LOW(0xA)
000232 f409      	BRNE _0x2000007
000233 c052      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000234 94d3      	INC  R13
000235 9aaa      	SBI  0x15,2
000236 81a8      	LD   R26,Y
000237 dfc8      	RCALL __lcd_write_data
000238 98aa      	CBI  0x15,2
000239 c04c      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00023a 93ba      	ST   -Y,R27
00023b 93aa      	ST   -Y,R26
00023c 931a      	ST   -Y,R17
                 _0x2000008:
00023d 81a9      	LDD  R26,Y+1
00023e 81ba      	LDD  R27,Y+1+1
00023f 91ed      	LD   R30,X+
000240 83a9      	STD  Y+1,R26
000241 83ba      	STD  Y+1+1,R27
000242 2f1e      	MOV  R17,R30
000243 30e0      	CPI  R30,0
000244 f019      	BREQ _0x200000A
000245 2fa1      	MOV  R26,R17
000246 dfdc      	RCALL _lcd_putchar
000247 cff5      	RJMP _0x2000008
                 _0x200000A:
000248 c010      	RJMP _0x2020002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000249 93ba      	ST   -Y,R27
00024a 93aa      	ST   -Y,R26
00024b 931a      	ST   -Y,R17
                 _0x200000B:
00024c 81e9      	LDD  R30,Y+1
00024d 81fa      	LDD  R31,Y+1+1
00024e 9631      	ADIW R30,1
00024f 83e9      	STD  Y+1,R30
000250 83fa      	STD  Y+1+1,R31
000251 9731      	SBIW R30,1
000252 91e4      	LPM  R30,Z
000253 2f1e      	MOV  R17,R30
000254 30e0      	CPI  R30,0
000255 f019      	BREQ _0x200000D
000256 2fa1      	MOV  R26,R17
000257 dfcb      	RCALL _lcd_putchar
000258 cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x2020002:
000259 8118      	LDD  R17,Y+0
00025a 9623      	ADIW R28,3
00025b 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00025c 93aa      	ST   -Y,R26
00025d b3e4      	IN   R30,0x14
00025e 6fe0      	ORI  R30,LOW(0xF0)
00025f bbe4      	OUT  0x14,R30
000260 9aa3      	SBI  0x14,3
000261 9aa2      	SBI  0x14,2
000262 9aa1      	SBI  0x14,1
000263 98ab      	CBI  0x15,3
000264 98aa      	CBI  0x15,2
000265 98a9      	CBI  0x15,1
000266 81e8      	LD   R30,Y
000267 93e0 0189 	STS  __lcd_maxx,R30
000269 58e0      	SUBI R30,-LOW(128)
                +
00026a 93e0 0187+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00026c 81e8      	LD   R30,Y
00026d 54e0      	SUBI R30,-LOW(192)
                +
00026e 93e0 0188+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000270 e1a4      	LDI  R26,LOW(20)
000271 e0b0      	LDI  R27,0
000272 940e 02ae 	CALL _delay_ms
000274 d032      	RCALL SUBOPT_0x6
000275 d031      	RCALL SUBOPT_0x6
000276 d030      	RCALL SUBOPT_0x6
000277 e2a0      	LDI  R26,LOW(32)
000278 df73      	RCALL __lcd_write_nibble_G100
                +
000279 ec88     +LDI R24 , LOW ( 200 )
00027a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00027b 9701     +SBIW R24 , 1
00027c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00027d e2a8      	LDI  R26,LOW(40)
00027e df81      	RCALL __lcd_write_data
00027f e0a4      	LDI  R26,LOW(4)
000280 df7f      	RCALL __lcd_write_data
000281 e8a5      	LDI  R26,LOW(133)
000282 df7d      	RCALL __lcd_write_data
000283 e0a6      	LDI  R26,LOW(6)
000284 df7b      	RCALL __lcd_write_data
000285 df93      	RCALL _lcd_clear
                 _0x2020001:
000286 9621      	ADIW R28,1
000287 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _number:
00017b           	.BYTE 0xA
                 __base_y_G100:
000185           	.BYTE 0x4
                 __lcd_maxx:
000189           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
000288 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
000289 958a     +DEC R24
00028a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
00028b 9473      	INC  R7
00028c e0e2      	LDI  R30,LOW(2)
00028d 15e7      	CP   R30,R7
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00028f 91ec      	LD   R30,X
000290 bbe2      	OUT  0x12,R30
000291 e0aa      	LDI  R26,LOW(10)
000292 e0b0      	LDI  R27,0
000293 940c 02ae 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000295 e0e0      	LDI  R30,LOW(0)
000296 93ea      	ST   -Y,R30
000297 e0a0      	LDI  R26,LOW(0)
000298 cf73      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000299 dfaf      	RCALL _lcd_putsf
00029a 81a8      	LD   R26,Y
00029b 27bb      	CLR  R27
00029c 940c 00fc 	JMP  _readData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00029e 2daa      	MOV  R26,R10
00029f 27bb      	CLR  R27
0002a0 940c 0144 	JMP  _display
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002a2 df5d      	RCALL __lcd_write_data
0002a3 e0a3      	LDI  R26,LOW(3)
0002a4 e0b0      	LDI  R27,0
0002a5 940c 02ae 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0002a7 e3a0      	LDI  R26,LOW(48)
0002a8 df43      	RCALL __lcd_write_nibble_G100
                +
0002a9 ec88     +LDI R24 , LOW ( 200 )
0002aa e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002ab 9701     +SBIW R24 , 1
0002ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002ad 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002ae 9610      	adiw r26,0
0002af f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002b0 ed80     +LDI R24 , LOW ( 0x7D0 )
0002b1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002b2 9701     +SBIW R24 , 1
0002b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002b4 95a8      	wdr
0002b5 9711      	sbiw r26,1
0002b6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002b7 9508      	ret
                 
                 __EQW12:
0002b8 17ea      	CP   R30,R26
0002b9 07fb      	CPC  R31,R27
0002ba e0e1      	LDI  R30,1
0002bb f009      	BREQ __EQW12T
0002bc 27ee      	CLR  R30
                 __EQW12T:
0002bd 9508      	RET
                 
                 __DIVW21U:
0002be 2400      	CLR  R0
0002bf 2411      	CLR  R1
0002c0 e190      	LDI  R25,16
                 __DIVW21U1:
0002c1 0faa      	LSL  R26
0002c2 1fbb      	ROL  R27
0002c3 1c00      	ROL  R0
0002c4 1c11      	ROL  R1
0002c5 1a0e      	SUB  R0,R30
0002c6 0a1f      	SBC  R1,R31
0002c7 f418      	BRCC __DIVW21U2
0002c8 0e0e      	ADD  R0,R30
0002c9 1e1f      	ADC  R1,R31
0002ca c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002cb 60a1      	SBR  R26,1
                 __DIVW21U3:
0002cc 959a      	DEC  R25
0002cd f799      	BRNE __DIVW21U1
0002ce 01fd      	MOVW R30,R26
0002cf 01d0      	MOVW R26,R0
0002d0 9508      	RET
                 
                 __MODW21U:
0002d1 dfec      	RCALL __DIVW21U
0002d2 01fd      	MOVW R30,R26
0002d3 9508      	RET
                 
                 __SAVELOCR4:
0002d4 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002d5 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002d6 931a      	ST   -Y,R17
0002d7 930a      	ST   -Y,R16
0002d8 9508      	RET
                 
                 __LOADLOCR4:
0002d9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002da 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002db 8119      	LDD  R17,Y+1
0002dc 8108      	LD   R16,Y
0002dd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   2 r7 :   6 
r8 :   4 r9 :   2 r10:   4 r11:   5 r12:   4 r13:   4 r14:   0 r15:   0 
r16:  13 r17:  15 r18:   4 r19:   5 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  29 r25:   7 r26: 107 r27:  36 r28:   7 r29:   1 r30: 166 r31:  23 
x  :   9 y  :  89 z  :   9 
Registers used: 28 out of 35 (80.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   7 
adiw  :   9 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   0 brmi  :   0 brne  :  18 brpl  :   0 brsh  :   8 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  13 
cbi   :  14 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  11 cpc   :   2 cpi   :   7 cpse  :   0 dec   :  11 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   6 jmp   :  27 ld    :  23 ldd   :  30 ldi   : 104 
lds   :   1 lpm   :   9 lsl   :   3 lsr   :   0 mov   :  24 movw  :  15 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  43 pop   :   0 push  :   0 rcall :  61 ret   :  20 
reti  :   0 rjmp  :  37 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  17 sbic  :   6 sbis  :   4 sbiw  :   8 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  42 std   :   4 sts   :   3 sub   :   1 subi  :   5 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005bc   1370     98   1468   16384   9.0%
[.dseg] 0x000060 0x00018a      0     42     42    1024   4.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
