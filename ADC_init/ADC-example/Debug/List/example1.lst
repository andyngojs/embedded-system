
AVRASM ver. 2.1.30  F:\Electronics\AVR\ADC_init\ADC-example\Debug\List\example1.asm Fri Oct 22 14:21:02 2021

F:\Electronics\AVR\ADC_init\ADC-example\Debug\List\example1.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Electronics\AVR\ADC_init\ADC-example\Debug\List\example1.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Electronics\AVR\ADC_init\ADC-example\Debug\List\example1.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dienAp=R4
                 	.DEF _dienAp_msb=R5
                 	.DEF _mode=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 006c 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
F:\Electronics\AVR\ADC_init\ADC-example\Debug\List\example1.asm(1123): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 _0x3:
00002b f9c0
00002c b0a4
00002d 9299
00002e f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00002f 9080      	.DB  0x80,0x90
                 _0x4:
000030 7940
000031 3024
000032 1219
000033 7802      	.DB  0x40,0x79,0x24,0x30,0x19,0x12,0x2,0x78
000034 1000      	.DB  0x0,0x10
                 
                 __GLOBAL_INI_TBL:
000035 0001      	.DW  0x01
000036 0007      	.DW  0x07
000037 0054      	.DW  __REG_VARS*2
                 
000038 000a      	.DW  0x0A
000039 0162      	.DW  _number
00003a 0056      	.DW  _0x3*2
                 
00003b 000a      	.DW  0x0A
00003c 016c      	.DW  _number1
00003d 0060      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
00003e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003f 94f8      	CLI
000040 27ee      	CLR  R30
000041 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000042 e0f1      	LDI  R31,1
000043 bffb      	OUT  GICR,R31
000044 bfeb      	OUT  GICR,R30
000045 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 00db 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 0
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;#define DK1     PORTC.4
                 ;#define DK2     PORTC.5
                 ;#define DK3     PORTC.6
                 ;#define DK4     PORTC.7
                 ;
                 ;unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
                 
                 	.DSEG
                 ;// Bang ma hien thi led 7 segment co dau cham
                 ;unsigned char number1[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};
                 ;
                 ;unsigned int dienAp;
                 ;unsigned char mode = 0;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
00006c 938a      	ST   -Y,R24
00006d 93aa      	ST   -Y,R26
00006e 93ba      	ST   -Y,R27
00006f 93ea      	ST   -Y,R30
000070 93fa      	ST   -Y,R31
000071 b7ef      	IN   R30,SREG
000072 93ea      	ST   -Y,R30
                 ; 0000 001A static unsigned char input_index=0;
                 ; 0000 001B // Read the AD conversion result
                 ; 0000 001C adc_data[input_index]=ADCW;
000073 91e0 0176 	LDS  R30,_input_index_S0000000000
000075 e6a0      	LDI  R26,LOW(_adc_data)
000076 e0b1      	LDI  R27,HIGH(_adc_data)
000077 e0f0      	LDI  R31,0
000078 0fee      	LSL  R30
000079 1fff      	ROL  R31
00007a 0fae      	ADD  R26,R30
00007b 1fbf      	ADC  R27,R31
00007c b1e4      	IN   R30,0x4
00007d b1f5      	IN   R31,0x4+1
00007e 93ed      	ST   X+,R30
00007f 93fc      	ST   X,R31
                 ; 0000 001D // Select next ADC input
                 ; 0000 001E if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000080 91a0 0176 	LDS  R26,_input_index_S0000000000
000082 5faf      	SUBI R26,-LOW(1)
000083 93a0 0176 	STS  _input_index_S0000000000,R26
000085 30a1      	CPI  R26,LOW(0x1)
000086 f018      	BRLO _0x5
                 ; 0000 001F    input_index=0;
000087 e0e0      	LDI  R30,LOW(0)
000088 93e0 0176 	STS  _input_index_S0000000000,R30
                 ; 0000 0020 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x5:
00008a 91e0 0176 	LDS  R30,_input_index_S0000000000
00008c b9e7      	OUT  0x7,R30
                 ; 0000 0021 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0022 delay_us(10);
                +
00008d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00008e 958a     +DEC R24
00008f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0023 // Start the AD conversion
                 ; 0000 0024 ADCSRA|=(1<<ADSC);
000090 9a36      	SBI  0x6,6
                 ; 0000 0025 }
000091 91e9      	LD   R30,Y+
000092 bfef      	OUT  SREG,R30
000093 91f9      	LD   R31,Y+
000094 91e9      	LD   R30,Y+
000095 91b9      	LD   R27,Y+
000096 91a9      	LD   R26,Y+
000097 9189      	LD   R24,Y+
000098 9518      	RETI
                 ; .FEND
                 ;
                 ;void show1(unsigned int x) {
                 ; 0000 0027 void show1(unsigned int x) {
                 _show1:
                 ; .FSTART _show1
                 ; 0000 0028     unsigned int a,b;
                 ; 0000 0029     b = x % 10;
000099 93ba      	ST   -Y,R27
00009a 93aa      	ST   -Y,R26
00009b 940e 01d6 	CALL __SAVELOCR4
                 ;	x -> Y+4
                 ;	a -> R16,R17
                 ;	b -> R18,R19
00009d 81ac      	LDD  R26,Y+4
00009e 81bd      	LDD  R27,Y+4+1
00009f d07b      	RCALL SUBOPT_0x0
0000a0 019f      	MOVW R18,R30
                 ; 0000 002A     a = x / 10;
0000a1 81ac      	LDD  R26,Y+4
0000a2 81bd      	LDD  R27,Y+4+1
0000a3 d07c      	RCALL SUBOPT_0x1
0000a4 d080      	RCALL SUBOPT_0x2
                 ; 0000 002B 
                 ; 0000 002C     DK1 = 0;
                 ; 0000 002D     PORTB = number1[a];
                 ; 0000 002E     delay_ms(10);
0000a5 e0aa      	LDI  R26,LOW(10)
0000a6 d087      	RCALL SUBOPT_0x3
                 ; 0000 002F     DK1 = 1;
                 ; 0000 0030 
                 ; 0000 0031     DK2 = 0;
                 ; 0000 0032     PORTB = number[b];
                 ; 0000 0033     delay_ms(10);
0000a7 e0aa      	LDI  R26,LOW(10)
0000a8 e0b0      	LDI  R27,0
0000a9 940e 0169 	CALL _delay_ms
                 ; 0000 0034     DK2 = 1;
0000ab 9aad      	SBI  0x15,5
                 ; 0000 0035 }
0000ac 940e 01dd 	CALL __LOADLOCR4
0000ae 9626      	ADIW R28,6
0000af 9508      	RET
                 ; .FEND
                 ;
                 ;void show2(unsigned int x) {
                 ; 0000 0037 void show2(unsigned int x) {
                 _show2:
                 ; .FSTART _show2
                 ; 0000 0038     unsigned int a, b, c;
                 ; 0000 0039     c = x % 10;
0000b0 93ba      	ST   -Y,R27
0000b1 93aa      	ST   -Y,R26
0000b2 940e 01d4 	CALL __SAVELOCR6
                 ;	x -> Y+6
                 ;	a -> R16,R17
                 ;	b -> R18,R19
                 ;	c -> R20,R21
0000b4 d085      	RCALL SUBOPT_0x4
0000b5 01af      	MOVW R20,R30
                 ; 0000 003A     x = x / 10;
0000b6 81ae      	LDD  R26,Y+6
0000b7 81bf      	LDD  R27,Y+6+1
0000b8 d067      	RCALL SUBOPT_0x1
0000b9 83ee      	STD  Y+6,R30
0000ba 83ff      	STD  Y+6+1,R31
                 ; 0000 003B     b = x % 10;
0000bb d07e      	RCALL SUBOPT_0x4
0000bc 019f      	MOVW R18,R30
                 ; 0000 003C     x = x / 10;
0000bd 81ae      	LDD  R26,Y+6
0000be 81bf      	LDD  R27,Y+6+1
0000bf d060      	RCALL SUBOPT_0x1
0000c0 83ee      	STD  Y+6,R30
0000c1 83ff      	STD  Y+6+1,R31
                 ; 0000 003D     a = x % 10;
0000c2 d077      	RCALL SUBOPT_0x4
0000c3 d061      	RCALL SUBOPT_0x2
                 ; 0000 003E 
                 ; 0000 003F     DK1 = 0;
                 ; 0000 0040     PORTB = number1[a];
                 ; 0000 0041     delay_ms(6);
0000c4 e0a6      	LDI  R26,LOW(6)
0000c5 d068      	RCALL SUBOPT_0x3
                 ; 0000 0042     DK1 = 1;
                 ; 0000 0043 
                 ; 0000 0044     DK2 = 0;
                 ; 0000 0045     PORTB = number[b];
                 ; 0000 0046     delay_ms(6);
0000c6 e0a6      	LDI  R26,LOW(6)
0000c7 e0b0      	LDI  R27,0
0000c8 940e 0169 	CALL _delay_ms
                 ; 0000 0047     DK2 = 1;
0000ca 9aad      	SBI  0x15,5
                 ; 0000 0048 
                 ; 0000 0049     DK3 = 0;
0000cb 98ae      	CBI  0x15,6
                 ; 0000 004A     PORTB = number[c];
0000cc e6a2      	LDI  R26,LOW(_number)
0000cd e0b1      	LDI  R27,HIGH(_number)
0000ce 0fa4      	ADD  R26,R20
0000cf 1fb5      	ADC  R27,R21
0000d0 91ec      	LD   R30,X
0000d1 bbe8      	OUT  0x18,R30
                 ; 0000 004B     delay_ms(6);
0000d2 e0a6      	LDI  R26,LOW(6)
0000d3 e0b0      	LDI  R27,0
0000d4 940e 0169 	CALL _delay_ms
                 ; 0000 004C     DK3 = 1;
0000d6 9aae      	SBI  0x15,6
                 ; 0000 004D }
0000d7 940e 01db 	CALL __LOADLOCR6
0000d9 9628      	ADIW R28,8
0000da 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0050 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0051 // Input/Output Ports initialization
                 ; 0000 0052 // Port A initialization
                 ; 0000 0053 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0054 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000db e0e0      	LDI  R30,LOW(0)
0000dc bbea      	OUT  0x1A,R30
                 ; 0000 0055 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0056 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000dd bbeb      	OUT  0x1B,R30
                 ; 0000 0057 
                 ; 0000 0058 // Port B initialization
                 ; 0000 0059 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000de efef      	LDI  R30,LOW(255)
0000df bbe7      	OUT  0x17,R30
                 ; 0000 005B // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 005C PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
0000e0 bbe8      	OUT  0x18,R30
                 ; 0000 005D 
                 ; 0000 005E // Port C initialization
                 ; 0000 005F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0060 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000e1 efe3      	LDI  R30,LOW(243)
0000e2 bbe4      	OUT  0x14,R30
                 ; 0000 0061 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0062 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
0000e3 bbe5      	OUT  0x15,R30
                 ; 0000 0063 
                 ; 0000 0064 // Port D initialization
                 ; 0000 0065 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0066 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 bbe1      	OUT  0x11,R30
                 ; 0000 0067 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0068 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000e6 bbe2      	OUT  0x12,R30
                 ; 0000 0069 
                 ; 0000 006A // Timer/Counter 0 initialization
                 ; 0000 006B // Clock source: System Clock
                 ; 0000 006C // Clock value: Timer 0 Stopped
                 ; 0000 006D // Mode: Normal top=0xFF
                 ; 0000 006E // OC0 output: Disconnected
                 ; 0000 006F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000e7 bfe3      	OUT  0x33,R30
                 ; 0000 0070 TCNT0=0x00;
0000e8 bfe2      	OUT  0x32,R30
                 ; 0000 0071 OCR0=0x00;
0000e9 bfec      	OUT  0x3C,R30
                 ; 0000 0072 
                 ; 0000 0073 // Timer/Counter 1 initialization
                 ; 0000 0074 // Clock source: System Clock
                 ; 0000 0075 // Clock value: Timer1 Stopped
                 ; 0000 0076 // Mode: Normal top=0xFFFF
                 ; 0000 0077 // OC1A output: Disconnected
                 ; 0000 0078 // OC1B output: Disconnected
                 ; 0000 0079 // Noise Canceler: Off
                 ; 0000 007A // Input Capture on Falling Edge
                 ; 0000 007B // Timer1 Overflow Interrupt: Off
                 ; 0000 007C // Input Capture Interrupt: Off
                 ; 0000 007D // Compare A Match Interrupt: Off
                 ; 0000 007E // Compare B Match Interrupt: Off
                 ; 0000 007F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ea bdef      	OUT  0x2F,R30
                 ; 0000 0080 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000eb bdee      	OUT  0x2E,R30
                 ; 0000 0081 TCNT1H=0x00;
0000ec bded      	OUT  0x2D,R30
                 ; 0000 0082 TCNT1L=0x00;
0000ed bdec      	OUT  0x2C,R30
                 ; 0000 0083 ICR1H=0x00;
0000ee bde7      	OUT  0x27,R30
                 ; 0000 0084 ICR1L=0x00;
0000ef bde6      	OUT  0x26,R30
                 ; 0000 0085 OCR1AH=0x00;
0000f0 bdeb      	OUT  0x2B,R30
                 ; 0000 0086 OCR1AL=0x00;
0000f1 bdea      	OUT  0x2A,R30
                 ; 0000 0087 OCR1BH=0x00;
0000f2 bde9      	OUT  0x29,R30
                 ; 0000 0088 OCR1BL=0x00;
0000f3 bde8      	OUT  0x28,R30
                 ; 0000 0089 
                 ; 0000 008A // Timer/Counter 2 initialization
                 ; 0000 008B // Clock source: System Clock
                 ; 0000 008C // Clock value: Timer2 Stopped
                 ; 0000 008D // Mode: Normal top=0xFF
                 ; 0000 008E // OC2 output: Disconnected
                 ; 0000 008F ASSR=0<<AS2;
0000f4 bde2      	OUT  0x22,R30
                 ; 0000 0090 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000f5 bde5      	OUT  0x25,R30
                 ; 0000 0091 TCNT2=0x00;
0000f6 bde4      	OUT  0x24,R30
                 ; 0000 0092 OCR2=0x00;
0000f7 bde3      	OUT  0x23,R30
                 ; 0000 0093 
                 ; 0000 0094 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0095 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000f8 bfe9      	OUT  0x39,R30
                 ; 0000 0096 
                 ; 0000 0097 // External Interrupt(s) initialization
                 ; 0000 0098 // INT0: Off
                 ; 0000 0099 // INT1: Off
                 ; 0000 009A // INT2: Off
                 ; 0000 009B MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000f9 bfe5      	OUT  0x35,R30
                 ; 0000 009C MCUCSR=(0<<ISC2);
0000fa bfe4      	OUT  0x34,R30
                 ; 0000 009D 
                 ; 0000 009E // USART initialization
                 ; 0000 009F // USART disabled
                 ; 0000 00A0 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000fb b9ea      	OUT  0xA,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // Analog Comparator initialization
                 ; 0000 00A3 // Analog Comparator: Off
                 ; 0000 00A4 // The Analog Comparator's positive input is
                 ; 0000 00A5 // connected to the AIN0 pin
                 ; 0000 00A6 // The Analog Comparator's negative input is
                 ; 0000 00A7 // connected to the AIN1 pin
                 ; 0000 00A8 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000fc e8e0      	LDI  R30,LOW(128)
0000fd b9e8      	OUT  0x8,R30
                 ; 0000 00A9 
                 ; 0000 00AA // ADC initialization
                 ; 0000 00AB // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00AC // ADC Voltage Reference: AREF pin
                 ; 0000 00AD // ADC Auto Trigger Source: Free Running
                 ; 0000 00AE ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000fe e0e0      	LDI  R30,LOW(0)
0000ff b9e7      	OUT  0x7,R30
                 ; 0000 00AF ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000100 eeeb      	LDI  R30,LOW(235)
000101 b9e6      	OUT  0x6,R30
                 ; 0000 00B0 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000102 e0e0      	LDI  R30,LOW(0)
000103 bfe0      	OUT  0x30,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // SPI initialization
                 ; 0000 00B3 // SPI disabled
                 ; 0000 00B4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000104 b9ed      	OUT  0xD,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // TWI initialization
                 ; 0000 00B7 // TWI disabled
                 ; 0000 00B8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000105 bfe6      	OUT  0x36,R30
                 ; 0000 00B9 
                 ; 0000 00BA // Global enable interrupts
                 ; 0000 00BB #asm("sei")
000106 9478      	sei
                 ; 0000 00BC 
                 ; 0000 00BD while (1) {
                 _0x1A:
                 ; 0000 00BE         if (!PIND.0) {
000107 9980      	SBIC 0x10,0
000108 c00b      	RJMP _0x1D
                 ; 0000 00BF             mode = 1 - mode;
000109 e0e1      	LDI  R30,LOW(1)
00010a 19e7      	SUB  R30,R7
00010b 2e7e      	MOV  R7,R30
                 ; 0000 00C0             while(!PIND.0)
                 _0x1E:
00010c 9980      	SBIC 0x10,0
00010d c006      	RJMP _0x20
                 ; 0000 00C1             {
                 ; 0000 00C2                if (mode == 0)
00010e 2077      	TST  R7
00010f f411      	BRNE _0x21
                 ; 0000 00C3                 {
                 ; 0000 00C4                     dienAp = (50 * adc_data[0]) / 1023;
000110 d02c      	RCALL SUBOPT_0x5
                 ; 0000 00C5                     show1(dienAp);
                 ; 0000 00C6                     PORTC.0 = 0;
                 ; 0000 00C7                     PORTC.1 = 1;
                 ; 0000 00C8                 }
                 ; 0000 00C9                else
000111 c001      	RJMP _0x26
                 _0x21:
                 ; 0000 00CA                 {
                 ; 0000 00CB                    dienAp = (500 * (unsigned long)adc_data[0]) / 1023;
000112 d03c      	RCALL SUBOPT_0x6
                 ; 0000 00CC                    show2(dienAp);
                 ; 0000 00CD                    PORTC.0 = 1;
                 ; 0000 00CE                    PORTC.1 = 0;
                 ; 0000 00CF                 }
                 _0x26:
                 ; 0000 00D0             }
000113 cff8      	RJMP _0x1E
                 _0x20:
                 ; 0000 00D1 
                 ; 0000 00D2         }
                 ; 0000 00D3         if (mode == 0)
                 _0x1D:
000114 2077      	TST  R7
000115 f411      	BRNE _0x2B
                 ; 0000 00D4         {
                 ; 0000 00D5             dienAp = (50 * adc_data[0]) / 1023;
000116 d026      	RCALL SUBOPT_0x5
                 ; 0000 00D6             show1(dienAp);
                 ; 0000 00D7             PORTC.0 = 0;
                 ; 0000 00D8             PORTC.1 = 1;
                 ; 0000 00D9         }
                 ; 0000 00DA         else
000117 c001      	RJMP _0x30
                 _0x2B:
                 ; 0000 00DB         {
                 ; 0000 00DC             dienAp = (500 * (unsigned long)adc_data[0]) / 1023;
000118 d036      	RCALL SUBOPT_0x6
                 ; 0000 00DD             show2(dienAp);
                 ; 0000 00DE             PORTC.0 = 1;
                 ; 0000 00DF             PORTC.1 = 0;
                 ; 0000 00E0         }
                 _0x30:
                 ; 0000 00E1       }
000119 cfed      	RJMP _0x1A
                 ; 0000 00E2 }
                 _0x35:
00011a cfff      	RJMP _0x35
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
000160           	.BYTE 0x2
                 _number:
000162           	.BYTE 0xA
                 _number1:
00016c           	.BYTE 0xA
                 _input_index_S0000000000:
000176           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00011b e0ea      	LDI  R30,LOW(10)
00011c e0f0      	LDI  R31,HIGH(10)
00011d 940e 01d1 	CALL __MODW21U
00011f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000120 e0ea      	LDI  R30,LOW(10)
000121 e0f0      	LDI  R31,HIGH(10)
000122 940e 0199 	CALL __DIVW21U
000124 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000125 018f      	MOVW R16,R30
000126 98ac      	CBI  0x15,4
000127 e6ac      	LDI  R26,LOW(_number1)
000128 e0b1      	LDI  R27,HIGH(_number1)
000129 0fa0      	ADD  R26,R16
00012a 1fb1      	ADC  R27,R17
00012b 91ec      	LD   R30,X
00012c bbe8      	OUT  0x18,R30
00012d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00012e e0b0      	LDI  R27,0
00012f 940e 0169 	CALL _delay_ms
000131 9aac      	SBI  0x15,4
000132 98ad      	CBI  0x15,5
000133 e6a2      	LDI  R26,LOW(_number)
000134 e0b1      	LDI  R27,HIGH(_number)
000135 0fa2      	ADD  R26,R18
000136 1fb3      	ADC  R27,R19
000137 91ec      	LD   R30,X
000138 bbe8      	OUT  0x18,R30
000139 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00013a 81ae      	LDD  R26,Y+6
00013b 81bf      	LDD  R27,Y+6+1
00013c cfde      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00013d 91a0 0160 	LDS  R26,_adc_data
00013f 91b0 0161 	LDS  R27,_adc_data+1
000141 e3e2      	LDI  R30,LOW(50)
000142 940e 0193 	CALL __MULB1W2U
000144 01df      	MOVW R26,R30
000145 efef      	LDI  R30,LOW(1023)
000146 e0f3      	LDI  R31,HIGH(1023)
000147 940e 0199 	CALL __DIVW21U
000149 012f      	MOVW R4,R30
00014a 01d2      	MOVW R26,R4
00014b df4d      	RCALL _show1
00014c 98a8      	CBI  0x15,0
00014d 9aa9      	SBI  0x15,1
00014e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6:
00014f 91e0 0160 	LDS  R30,_adc_data
000151 91f0 0161 	LDS  R31,_adc_data+1
000153 2766      	CLR  R22
000154 2777      	CLR  R23
                +
000155 efa4     +LDI R26 , LOW ( 0x1F4 )
000156 e0b1     +LDI R27 , HIGH ( 0x1F4 )
000157 e080     +LDI R24 , BYTE3 ( 0x1F4 )
000158 e090     +LDI R25 , BYTE4 ( 0x1F4 )
                 	__GETD2N 0x1F4
000159 940e 0173 	CALL __MULD12U
00015b 01df      	MOVW R26,R30
00015c 01cb      	MOVW R24,R22
                +
00015d efef     +LDI R30 , LOW ( 0x3FF )
00015e e0f3     +LDI R31 , HIGH ( 0x3FF )
00015f e060     +LDI R22 , BYTE3 ( 0x3FF )
000160 e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
000161 940e 01ac 	CALL __DIVD21U
000163 012f      	MOVW R4,R30
000164 01d2      	MOVW R26,R4
000165 df4a      	RCALL _show2
000166 9aa8      	SBI  0x15,0
000167 98a9      	CBI  0x15,1
000168 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000169 9610      	adiw r26,0
00016a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016b ed80     +LDI R24 , LOW ( 0x7D0 )
00016c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00016d 9701     +SBIW R24 , 1
00016e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00016f 95a8      	wdr
000170 9711      	sbiw r26,1
000171 f7c9      	brne __delay_ms0
                 __delay_ms1:
000172 9508      	ret
                 
                 __MULD12U:
000173 9f7a      	MUL  R23,R26
000174 2d70      	MOV  R23,R0
000175 9f6b      	MUL  R22,R27
000176 0d70      	ADD  R23,R0
000177 9ff8      	MUL  R31,R24
000178 0d70      	ADD  R23,R0
000179 9fe9      	MUL  R30,R25
00017a 0d70      	ADD  R23,R0
00017b 9f6a      	MUL  R22,R26
00017c 2d60      	MOV  R22,R0
00017d 0d71      	ADD  R23,R1
00017e 9ffb      	MUL  R31,R27
00017f 0d60      	ADD  R22,R0
000180 1d71      	ADC  R23,R1
000181 9fe8      	MUL  R30,R24
000182 0d60      	ADD  R22,R0
000183 1d71      	ADC  R23,R1
000184 2788      	CLR  R24
000185 9ffa      	MUL  R31,R26
000186 2df0      	MOV  R31,R0
000187 0d61      	ADD  R22,R1
000188 1f78      	ADC  R23,R24
000189 9feb      	MUL  R30,R27
00018a 0df0      	ADD  R31,R0
00018b 1d61      	ADC  R22,R1
00018c 1f78      	ADC  R23,R24
00018d 9fea      	MUL  R30,R26
00018e 2de0      	MOV  R30,R0
00018f 0df1      	ADD  R31,R1
000190 1f68      	ADC  R22,R24
000191 1f78      	ADC  R23,R24
000192 9508      	RET
                 
                 __MULB1W2U:
000193 2f6e      	MOV  R22,R30
000194 9f6a      	MUL  R22,R26
000195 01f0      	MOVW R30,R0
000196 9f6b      	MUL  R22,R27
000197 0df0      	ADD  R31,R0
000198 9508      	RET
                 
                 __DIVW21U:
000199 2400      	CLR  R0
00019a 2411      	CLR  R1
00019b e190      	LDI  R25,16
                 __DIVW21U1:
00019c 0faa      	LSL  R26
00019d 1fbb      	ROL  R27
00019e 1c00      	ROL  R0
00019f 1c11      	ROL  R1
0001a0 1a0e      	SUB  R0,R30
0001a1 0a1f      	SBC  R1,R31
0001a2 f418      	BRCC __DIVW21U2
0001a3 0e0e      	ADD  R0,R30
0001a4 1e1f      	ADC  R1,R31
0001a5 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001a6 60a1      	SBR  R26,1
                 __DIVW21U3:
0001a7 959a      	DEC  R25
0001a8 f799      	BRNE __DIVW21U1
0001a9 01fd      	MOVW R30,R26
0001aa 01d0      	MOVW R26,R0
0001ab 9508      	RET
                 
                 __DIVD21U:
0001ac 933f      	PUSH R19
0001ad 934f      	PUSH R20
0001ae 935f      	PUSH R21
0001af 2400      	CLR  R0
0001b0 2411      	CLR  R1
0001b1 2744      	CLR  R20
0001b2 2755      	CLR  R21
0001b3 e230      	LDI  R19,32
                 __DIVD21U1:
0001b4 0faa      	LSL  R26
0001b5 1fbb      	ROL  R27
0001b6 1f88      	ROL  R24
0001b7 1f99      	ROL  R25
0001b8 1c00      	ROL  R0
0001b9 1c11      	ROL  R1
0001ba 1f44      	ROL  R20
0001bb 1f55      	ROL  R21
0001bc 1a0e      	SUB  R0,R30
0001bd 0a1f      	SBC  R1,R31
0001be 0b46      	SBC  R20,R22
0001bf 0b57      	SBC  R21,R23
0001c0 f428      	BRCC __DIVD21U2
0001c1 0e0e      	ADD  R0,R30
0001c2 1e1f      	ADC  R1,R31
0001c3 1f46      	ADC  R20,R22
0001c4 1f57      	ADC  R21,R23
0001c5 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0001c6 60a1      	SBR  R26,1
                 __DIVD21U3:
0001c7 953a      	DEC  R19
0001c8 f759      	BRNE __DIVD21U1
0001c9 01fd      	MOVW R30,R26
0001ca 01bc      	MOVW R22,R24
0001cb 01d0      	MOVW R26,R0
0001cc 01ca      	MOVW R24,R20
0001cd 915f      	POP  R21
0001ce 914f      	POP  R20
0001cf 913f      	POP  R19
0001d0 9508      	RET
                 
                 __MODW21U:
0001d1 dfc7      	RCALL __DIVW21U
0001d2 01fd      	MOVW R30,R26
0001d3 9508      	RET
                 
                 __SAVELOCR6:
0001d4 935a      	ST   -Y,R21
                 __SAVELOCR5:
0001d5 934a      	ST   -Y,R20
                 __SAVELOCR4:
0001d6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001d7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001d8 931a      	ST   -Y,R17
0001d9 930a      	ST   -Y,R16
0001da 9508      	RET
                 
                 __LOADLOCR6:
0001db 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0001dc 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0001dd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001de 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001df 8119      	LDD  R17,Y+1
0001e0 8108      	LD   R16,Y
0001e1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  26 r1 :  15 r2 :   0 r3 :   0 r4 :   4 r5 :   0 r6 :   0 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   3 r18:   5 r19:   7 r20:  11 r21:   9 r22:  19 r23:  15 
r24:  25 r25:   8 r26:  51 r27:  31 r28:   3 r29:   1 r30: 111 r31:  28 
x  :   8 y  :  42 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  15 add   :  16 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  14 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   1 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   0 jmp   :  22 ld    :  10 ldd   :  15 ldi   :  60 
lds   :   7 lpm   :   7 lsl   :   3 lsr   :   0 mov   :   6 movw  :  22 
mul   :  12 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  46 pop   :   3 push  :   3 rcall :  18 ret   :  16 
reti  :   1 rjmp  :  11 rol   :  11 ror   :   0 sbc   :   4 sbci  :   0 
sbi   :   7 sbic  :   2 sbis  :   0 sbiw  :   5 sbr   :   2 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   4 sts   :   2 sub   :   3 subi  :   1 swap  :   0 
tst   :   2 wdr   :   1 
Instructions used: 45 out of 116 (38.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003c4    922     42    964   16384   5.9%
[.dseg] 0x000060 0x000177      0     23     23    1024   2.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
