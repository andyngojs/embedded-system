;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define FIRST_ADC_INPUT 0
;#define LAST_ADC_INPUT 0
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;#define DK1     PORTC.4
;#define DK2     PORTC.5
;#define DK3     PORTC.6
;#define DK4     PORTC.7
;
;unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

	.DSEG
;// Bang ma hien thi led 7 segment co dau cham
;unsigned char number1[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};
;
;unsigned int dienAp;
;unsigned char mode = 0;
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A static unsigned char input_index=0;
; 0000 001B // Read the AD conversion result
; 0000 001C adc_data[input_index]=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001D // Select next ADC input
; 0000 001E if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001F    input_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0020 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0021 // Delay needed for the stabilization of the ADC input voltage
; 0000 0022 delay_us(10);
;PCODE: $00000020 VOL: 0
; 0000 0023 // Start the AD conversion
; 0000 0024 ADCSRA|=(1<<ADSC);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0025 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void show1(unsigned int x) {
; 0000 0027 void show1(unsigned int x) {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0028     unsigned int a,b;
; 0000 0029     b = x % 10;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	x -> Y+4
;	a -> R16,R17
;	b -> R18,R19
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002A     a = x / 10;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002B 
; 0000 002C     DK1 = 0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002D     PORTB = number1[a];
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002E     delay_ms(10);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002F     DK1 = 1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0030 
; 0000 0031     DK2 = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0032     PORTB = number[b];
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0033     delay_ms(10);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0034     DK2 = 1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0035 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;void show2(unsigned int x) {
; 0000 0037 void show2(unsigned int x) {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0038     unsigned int a, b, c;
; 0000 0039     c = x % 10;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	x -> Y+6
;	a -> R16,R17
;	b -> R18,R19
;	c -> R20,R21
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003A     x = x / 10;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003B     b = x % 10;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003C     x = x / 10;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003D     a = x % 10;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003E 
; 0000 003F     DK1 = 0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0040     PORTB = number1[a];
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0041     delay_ms(6);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0042     DK1 = 1;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0043 
; 0000 0044     DK2 = 0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0045     PORTB = number[b];
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0046     delay_ms(6);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0047     DK2 = 1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0048 
; 0000 0049     DK3 = 0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004A     PORTB = number[c];
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 004B     delay_ms(6);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004C     DK3 = 1;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 004D }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;void main(void)
; 0000 0050 {
;PCODE: $00000089 VOL: 0
; 0000 0051 // Input/Output Ports initialization
; 0000 0052 // Port A initialization
; 0000 0053 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0054 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0055 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0056 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0057 
; 0000 0058 // Port B initialization
; 0000 0059 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 005A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 005B // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 005C PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005D 
; 0000 005E // Port C initialization
; 0000 005F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0060 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0061 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0062 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0063 
; 0000 0064 // Port D initialization
; 0000 0065 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0066 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0067 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0068 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0069 
; 0000 006A // Timer/Counter 0 initialization
; 0000 006B // Clock source: System Clock
; 0000 006C // Clock value: Timer 0 Stopped
; 0000 006D // Mode: Normal top=0xFF
; 0000 006E // OC0 output: Disconnected
; 0000 006F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0070 TCNT0=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0071 OCR0=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0072 
; 0000 0073 // Timer/Counter 1 initialization
; 0000 0074 // Clock source: System Clock
; 0000 0075 // Clock value: Timer1 Stopped
; 0000 0076 // Mode: Normal top=0xFFFF
; 0000 0077 // OC1A output: Disconnected
; 0000 0078 // OC1B output: Disconnected
; 0000 0079 // Noise Canceler: Off
; 0000 007A // Input Capture on Falling Edge
; 0000 007B // Timer1 Overflow Interrupt: Off
; 0000 007C // Input Capture Interrupt: Off
; 0000 007D // Compare A Match Interrupt: Off
; 0000 007E // Compare B Match Interrupt: Off
; 0000 007F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0080 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0081 TCNT1H=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0082 TCNT1L=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0083 ICR1H=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0084 ICR1L=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0085 OCR1AH=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0086 OCR1AL=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0087 OCR1BH=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0088 OCR1BL=0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0089 
; 0000 008A // Timer/Counter 2 initialization
; 0000 008B // Clock source: System Clock
; 0000 008C // Clock value: Timer2 Stopped
; 0000 008D // Mode: Normal top=0xFF
; 0000 008E // OC2 output: Disconnected
; 0000 008F ASSR=0<<AS2;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0090 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0091 TCNT2=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0092 OCR2=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0093 
; 0000 0094 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0095 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0096 
; 0000 0097 // External Interrupt(s) initialization
; 0000 0098 // INT0: Off
; 0000 0099 // INT1: Off
; 0000 009A // INT2: Off
; 0000 009B MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 009C MCUCSR=(0<<ISC2);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009D 
; 0000 009E // USART initialization
; 0000 009F // USART disabled
; 0000 00A0 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A1 
; 0000 00A2 // Analog Comparator initialization
; 0000 00A3 // Analog Comparator: Off
; 0000 00A4 // The Analog Comparator's positive input is
; 0000 00A5 // connected to the AIN0 pin
; 0000 00A6 // The Analog Comparator's negative input is
; 0000 00A7 // connected to the AIN1 pin
; 0000 00A8 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00A9 
; 0000 00AA // ADC initialization
; 0000 00AB // ADC Clock frequency: 1000.000 kHz
; 0000 00AC // ADC Voltage Reference: AREF pin
; 0000 00AD // ADC Auto Trigger Source: Free Running
; 0000 00AE ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00AF ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00B0 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00B1 
; 0000 00B2 // SPI initialization
; 0000 00B3 // SPI disabled
; 0000 00B4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00B5 
; 0000 00B6 // TWI initialization
; 0000 00B7 // TWI disabled
; 0000 00B8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00B9 
; 0000 00BA // Global enable interrupts
; 0000 00BB #asm("sei")
;PCODE: $000000D0 VOL: 0
	sei
;PCODE: $000000D1 VOL: 0
; 0000 00BC 
; 0000 00BD while (1) {
;PCODE: $000000D2 VOL: 0
; 0000 00BE         if (!PIND.0) {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00BF             mode = 1 - mode;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00C0             while(!PIND.0)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00C1             {
; 0000 00C2                if (mode == 0)
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00C3                 {
; 0000 00C4                     dienAp = (50 * adc_data[0]) / 1023;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00C5                     show1(dienAp);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00C6                     PORTC.0 = 0;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00C7                     PORTC.1 = 1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00C8                 }
; 0000 00C9                else
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00CA                 {
; 0000 00CB                    dienAp = (500 * (unsigned long)adc_data[0]) / 1023;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00CC                    show2(dienAp);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00CD                    PORTC.0 = 1;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00CE                    PORTC.1 = 0;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00CF                 }
;PCODE: $000000FC VOL: 0
; 0000 00D0             }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00D1 
; 0000 00D2         }
; 0000 00D3         if (mode == 0)
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00D4         {
; 0000 00D5             dienAp = (50 * adc_data[0]) / 1023;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00D6             show1(dienAp);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00D7             PORTC.0 = 0;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00D8             PORTC.1 = 1;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00D9         }
; 0000 00DA         else
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00DB         {
; 0000 00DC             dienAp = (500 * (unsigned long)adc_data[0]) / 1023;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00DD             show2(dienAp);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00DE             PORTC.0 = 1;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00DF             PORTC.1 = 0;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00E0         }
;PCODE: $0000011F VOL: 0
; 0000 00E1       }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00E2 }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
