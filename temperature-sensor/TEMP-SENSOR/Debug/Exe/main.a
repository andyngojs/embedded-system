;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define DK1 PORTD.0
;#define DK2 PORTD.1
;
;unsigned int dienAp, temp;
;
;unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

	.DSEG
;
;#define FIRST_ADC_INPUT 0
;#define LAST_ADC_INPUT 0
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0014 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0015 static unsigned char input_index=0;
; 0000 0016 // Read the AD conversion result
; 0000 0017 adc_data[input_index]=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0018 // Select next ADC input
; 0000 0019 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001A    input_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001B ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001C // Delay needed for the stabilization of the ADC input voltage
; 0000 001D delay_us(10);
;PCODE: $00000020 VOL: 0
; 0000 001E // Start the AD conversion
; 0000 001F ADCSRA|=(1<<ADSC);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0020 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void show(unsigned int x) {
; 0000 0022 void show(unsigned int x) {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0023     unsigned int a, b;
; 0000 0024     b = x % 10;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	x -> Y+4
;	a -> R16,R17
;	b -> R18,R19
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0025     a = x / 10;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0026 
; 0000 0027     DK1 = 0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0028     PORTC = number[a];
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0029     delay_ms(10);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002A     DK1 = 1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002B 
; 0000 002C     DK2 = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002D     PORTC = number[b];
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 002E     delay_ms(10);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 002F     DK2 = 1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0030 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;void main(void)
; 0000 0033 {
;PCODE: $0000004C VOL: 0
; 0000 0034 // Input/Output Ports initialization
; 0000 0035 // Port A initialization
; 0000 0036 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0037 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0038 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0039 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003A 
; 0000 003B // Port B initialization
; 0000 003C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 003D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 003F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0040 
; 0000 0041 // Port C initialization
; 0000 0042 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0043 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0044 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0045 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0046 
; 0000 0047 // Port D initialization
; 0000 0048 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 0049 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 004A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=1 Bit0=1
; 0000 004B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004C 
; 0000 004D // Timer/Counter 0 initialization
; 0000 004E // Clock source: System Clock
; 0000 004F // Clock value: Timer 0 Stopped
; 0000 0050 // Mode: Normal top=0xFF
; 0000 0051 // OC0 output: Disconnected
; 0000 0052 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0053 TCNT0=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0054 OCR0=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0055 
; 0000 0056 // Timer/Counter 1 initialization
; 0000 0057 // Clock source: System Clock
; 0000 0058 // Clock value: Timer1 Stopped
; 0000 0059 // Mode: Normal top=0xFFFF
; 0000 005A // OC1A output: Disconnected
; 0000 005B // OC1B output: Disconnected
; 0000 005C // Noise Canceler: Off
; 0000 005D // Input Capture on Falling Edge
; 0000 005E // Timer1 Overflow Interrupt: Off
; 0000 005F // Input Capture Interrupt: Off
; 0000 0060 // Compare A Match Interrupt: Off
; 0000 0061 // Compare B Match Interrupt: Off
; 0000 0062 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0063 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0064 TCNT1H=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0065 TCNT1L=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0066 ICR1H=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0067 ICR1L=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0068 OCR1AH=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0069 OCR1AL=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006A OCR1BH=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 006B OCR1BL=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006C 
; 0000 006D // Timer/Counter 2 initialization
; 0000 006E // Clock source: System Clock
; 0000 006F // Clock value: Timer2 Stopped
; 0000 0070 // Mode: Normal top=0xFF
; 0000 0071 // OC2 output: Disconnected
; 0000 0072 ASSR=0<<AS2;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0073 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0074 TCNT2=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0075 OCR2=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0076 
; 0000 0077 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0078 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0079 
; 0000 007A // External Interrupt(s) initialization
; 0000 007B // INT0: Off
; 0000 007C // INT1: Off
; 0000 007D // INT2: Off
; 0000 007E MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 007F MCUCSR=(0<<ISC2);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0080 
; 0000 0081 // USART initialization
; 0000 0082 // USART disabled
; 0000 0083 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0084 
; 0000 0085 // Analog Comparator initialization
; 0000 0086 // Analog Comparator: Off
; 0000 0087 // The Analog Comparator's positive input is
; 0000 0088 // connected to the AIN0 pin
; 0000 0089 // The Analog Comparator's negative input is
; 0000 008A // connected to the AIN1 pin
; 0000 008B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 008C 
; 0000 008D // ADC initialization
; 0000 008E // ADC Clock frequency: 1000.000 kHz
; 0000 008F // ADC Voltage Reference: AREF pin
; 0000 0090 // ADC Auto Trigger Source: Free Running
; 0000 0091 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0092 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0093 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0094 
; 0000 0095 // SPI initialization
; 0000 0096 // SPI disabled
; 0000 0097 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0098 
; 0000 0099 // TWI initialization
; 0000 009A // TWI disabled
; 0000 009B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 009C 
; 0000 009D // Global enable interrupts
; 0000 009E #asm("sei")
;PCODE: $00000093 VOL: 0
	sei
;PCODE: $00000094 VOL: 0
; 0000 009F 
; 0000 00A0 while (1)
;PCODE: $00000095 VOL: 0
; 0000 00A1       {
; 0000 00A2           temp = (500 * (unsigned int)adc_data[0]) / 1023;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A3           show(temp);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A4       }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A5 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;
;/*
;su dung ADC 10 bit
;
;LM35: dien ap 10mV => 1 do
;
;dien ap = ( 5 * adc_data[0] ) / 1023
;nhiet do = dien ap * 100
;
;nhiet do = ( (dien ap * 100) * (unsigned int)adc_data[0] ) / 1023
;
;*/
