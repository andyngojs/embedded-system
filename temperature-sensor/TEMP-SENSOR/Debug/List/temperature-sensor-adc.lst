
AVRASM ver. 2.1.30  F:\Electronics\AVR\temperature-sensor\TEMP-SENSOR\Debug\List\temperature-sensor-adc.asm Fri Oct 22 15:22:51 2021

F:\Electronics\AVR\temperature-sensor\TEMP-SENSOR\Debug\List\temperature-sensor-adc.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Electronics\AVR\temperature-sensor\TEMP-SENSOR\Debug\List\temperature-sensor-adc.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Electronics\AVR\temperature-sensor\TEMP-SENSOR\Debug\List\temperature-sensor-adc.asm(1090): warning: Register r6 already defined by the .DEF directive
F:\Electronics\AVR\temperature-sensor\TEMP-SENSOR\Debug\List\temperature-sensor-adc.asm(1091): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dienAp=R4
                 	.DEF _dienAp_msb=R5
                 	.DEF _temp=R6
                 	.DEF _temp_msb=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0060 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a f9c0
00002b b0a4
00002c 9299
00002d f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00002e 9080      	.DB  0x80,0x90
                 
                 __GLOBAL_INI_TBL:
00002f 000a      	.DW  0x0A
000030 0160      	.DW  _number
000031 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000046 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000047 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000048 9185      	LPM  R24,Z+
000049 9195      	LPM  R25,Z+
00004a 9700      	SBIW R24,0
00004b f061      	BREQ __GLOBAL_INI_END
00004c 91a5      	LPM  R26,Z+
00004d 91b5      	LPM  R27,Z+
00004e 9005      	LPM  R0,Z+
00004f 9015      	LPM  R1,Z+
000050 01bf      	MOVW R22,R30
000051 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000052 9005      	LPM  R0,Z+
000053 920d      	ST   X+,R0
000054 9701      	SBIW R24,1
000055 f7e1      	BRNE __GLOBAL_INI_LOOP
000056 01fb      	MOVW R30,R22
000057 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000058 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000059 bfed      	OUT  SPL,R30
00005a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005e 940c 00b1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define DK1 PORTD.0
                 ;#define DK2 PORTD.1
                 ;
                 ;unsigned int dienAp, temp;
                 ;
                 ;unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
                 
                 	.DSEG
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 0
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 0014 {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
000060 938a      	ST   -Y,R24
000061 93aa      	ST   -Y,R26
000062 93ba      	ST   -Y,R27
000063 93ea      	ST   -Y,R30
000064 93fa      	ST   -Y,R31
000065 b7ef      	IN   R30,SREG
000066 93ea      	ST   -Y,R30
                 ; 0000 0015 static unsigned char input_index=0;
                 ; 0000 0016 // Read the AD conversion result
                 ; 0000 0017 adc_data[input_index]=ADCW;
000067 91e0 016c 	LDS  R30,_input_index_S0000000000
000069 e6aa      	LDI  R26,LOW(_adc_data)
00006a e0b1      	LDI  R27,HIGH(_adc_data)
00006b e0f0      	LDI  R31,0
00006c 0fee      	LSL  R30
00006d 1fff      	ROL  R31
00006e 0fae      	ADD  R26,R30
00006f 1fbf      	ADC  R27,R31
000070 b1e4      	IN   R30,0x4
000071 b1f5      	IN   R31,0x4+1
000072 93ed      	ST   X+,R30
000073 93fc      	ST   X,R31
                 ; 0000 0018 // Select next ADC input
                 ; 0000 0019 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000074 91a0 016c 	LDS  R26,_input_index_S0000000000
000076 5faf      	SUBI R26,-LOW(1)
000077 93a0 016c 	STS  _input_index_S0000000000,R26
000079 30a1      	CPI  R26,LOW(0x1)
00007a f018      	BRLO _0x4
                 ; 0000 001A    input_index=0;
00007b e0e0      	LDI  R30,LOW(0)
00007c 93e0 016c 	STS  _input_index_S0000000000,R30
                 ; 0000 001B ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x4:
00007e 91e0 016c 	LDS  R30,_input_index_S0000000000
000080 b9e7      	OUT  0x7,R30
                 ; 0000 001C // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001D delay_us(10);
                +
000081 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000082 958a     +DEC R24
000083 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001E // Start the AD conversion
                 ; 0000 001F ADCSRA|=(1<<ADSC);
000084 9a36      	SBI  0x6,6
                 ; 0000 0020 }
000085 91e9      	LD   R30,Y+
000086 bfef      	OUT  SREG,R30
000087 91f9      	LD   R31,Y+
000088 91e9      	LD   R30,Y+
000089 91b9      	LD   R27,Y+
00008a 91a9      	LD   R26,Y+
00008b 9189      	LD   R24,Y+
00008c 9518      	RETI
                 ; .FEND
                 ;
                 ;void show(unsigned int x) {
                 ; 0000 0022 void show(unsigned int x) {
                 _show:
                 ; .FSTART _show
                 ; 0000 0023     unsigned int a, b;
                 ; 0000 0024     b = x % 10;
00008d 93ba      	ST   -Y,R27
00008e 93aa      	ST   -Y,R26
00008f 940e 011d 	CALL __SAVELOCR4
                 ;	x -> Y+4
                 ;	a -> R16,R17
                 ;	b -> R18,R19
000091 81ac      	LDD  R26,Y+4
000092 81bd      	LDD  R27,Y+4+1
000093 e0ea      	LDI  R30,LOW(10)
000094 e0f0      	LDI  R31,HIGH(10)
000095 940e 011a 	CALL __MODW21U
000097 019f      	MOVW R18,R30
                 ; 0000 0025     a = x / 10;
000098 81ac      	LDD  R26,Y+4
000099 81bd      	LDD  R27,Y+4+1
00009a e0ea      	LDI  R30,LOW(10)
00009b e0f0      	LDI  R31,HIGH(10)
00009c 940e 0107 	CALL __DIVW21U
00009e 018f      	MOVW R16,R30
                 ; 0000 0026 
                 ; 0000 0027     DK1 = 0;
00009f 9890      	CBI  0x12,0
                 ; 0000 0028     PORTC = number[a];
0000a0 e6a0      	LDI  R26,LOW(_number)
0000a1 e0b1      	LDI  R27,HIGH(_number)
0000a2 0fa0      	ADD  R26,R16
0000a3 1fb1      	ADC  R27,R17
0000a4 d04a      	RCALL SUBOPT_0x0
                 ; 0000 0029     delay_ms(10);
                 ; 0000 002A     DK1 = 1;
0000a5 9a90      	SBI  0x12,0
                 ; 0000 002B 
                 ; 0000 002C     DK2 = 0;
0000a6 9891      	CBI  0x12,1
                 ; 0000 002D     PORTC = number[b];
0000a7 e6a0      	LDI  R26,LOW(_number)
0000a8 e0b1      	LDI  R27,HIGH(_number)
0000a9 0fa2      	ADD  R26,R18
0000aa 1fb3      	ADC  R27,R19
0000ab d043      	RCALL SUBOPT_0x0
                 ; 0000 002E     delay_ms(10);
                 ; 0000 002F     DK2 = 1;
0000ac 9a91      	SBI  0x12,1
                 ; 0000 0030 }
0000ad 940e 0122 	CALL __LOADLOCR4
0000af 9626      	ADIW R28,6
0000b0 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0033 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0034 // Input/Output Ports initialization
                 ; 0000 0035 // Port A initialization
                 ; 0000 0036 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0037 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000b1 e0e0      	LDI  R30,LOW(0)
0000b2 bbea      	OUT  0x1A,R30
                 ; 0000 0038 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0039 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000b3 bbeb      	OUT  0x1B,R30
                 ; 0000 003A 
                 ; 0000 003B // Port B initialization
                 ; 0000 003C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000b4 bbe7      	OUT  0x17,R30
                 ; 0000 003E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b5 bbe8      	OUT  0x18,R30
                 ; 0000 0040 
                 ; 0000 0041 // Port C initialization
                 ; 0000 0042 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0043 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000b6 efef      	LDI  R30,LOW(255)
0000b7 bbe4      	OUT  0x14,R30
                 ; 0000 0044 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 0045 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
0000b8 bbe5      	OUT  0x15,R30
                 ; 0000 0046 
                 ; 0000 0047 // Port D initialization
                 ; 0000 0048 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0049 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000b9 e0e3      	LDI  R30,LOW(3)
0000ba bbe1      	OUT  0x11,R30
                 ; 0000 004A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=1 Bit0=1
                 ; 0000 004B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
0000bb bbe2      	OUT  0x12,R30
                 ; 0000 004C 
                 ; 0000 004D // Timer/Counter 0 initialization
                 ; 0000 004E // Clock source: System Clock
                 ; 0000 004F // Clock value: Timer 0 Stopped
                 ; 0000 0050 // Mode: Normal top=0xFF
                 ; 0000 0051 // OC0 output: Disconnected
                 ; 0000 0052 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000bc e0e0      	LDI  R30,LOW(0)
0000bd bfe3      	OUT  0x33,R30
                 ; 0000 0053 TCNT0=0x00;
0000be bfe2      	OUT  0x32,R30
                 ; 0000 0054 OCR0=0x00;
0000bf bfec      	OUT  0x3C,R30
                 ; 0000 0055 
                 ; 0000 0056 // Timer/Counter 1 initialization
                 ; 0000 0057 // Clock source: System Clock
                 ; 0000 0058 // Clock value: Timer1 Stopped
                 ; 0000 0059 // Mode: Normal top=0xFFFF
                 ; 0000 005A // OC1A output: Disconnected
                 ; 0000 005B // OC1B output: Disconnected
                 ; 0000 005C // Noise Canceler: Off
                 ; 0000 005D // Input Capture on Falling Edge
                 ; 0000 005E // Timer1 Overflow Interrupt: Off
                 ; 0000 005F // Input Capture Interrupt: Off
                 ; 0000 0060 // Compare A Match Interrupt: Off
                 ; 0000 0061 // Compare B Match Interrupt: Off
                 ; 0000 0062 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c0 bdef      	OUT  0x2F,R30
                 ; 0000 0063 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c1 bdee      	OUT  0x2E,R30
                 ; 0000 0064 TCNT1H=0x00;
0000c2 bded      	OUT  0x2D,R30
                 ; 0000 0065 TCNT1L=0x00;
0000c3 bdec      	OUT  0x2C,R30
                 ; 0000 0066 ICR1H=0x00;
0000c4 bde7      	OUT  0x27,R30
                 ; 0000 0067 ICR1L=0x00;
0000c5 bde6      	OUT  0x26,R30
                 ; 0000 0068 OCR1AH=0x00;
0000c6 bdeb      	OUT  0x2B,R30
                 ; 0000 0069 OCR1AL=0x00;
0000c7 bdea      	OUT  0x2A,R30
                 ; 0000 006A OCR1BH=0x00;
0000c8 bde9      	OUT  0x29,R30
                 ; 0000 006B OCR1BL=0x00;
0000c9 bde8      	OUT  0x28,R30
                 ; 0000 006C 
                 ; 0000 006D // Timer/Counter 2 initialization
                 ; 0000 006E // Clock source: System Clock
                 ; 0000 006F // Clock value: Timer2 Stopped
                 ; 0000 0070 // Mode: Normal top=0xFF
                 ; 0000 0071 // OC2 output: Disconnected
                 ; 0000 0072 ASSR=0<<AS2;
0000ca bde2      	OUT  0x22,R30
                 ; 0000 0073 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000cb bde5      	OUT  0x25,R30
                 ; 0000 0074 TCNT2=0x00;
0000cc bde4      	OUT  0x24,R30
                 ; 0000 0075 OCR2=0x00;
0000cd bde3      	OUT  0x23,R30
                 ; 0000 0076 
                 ; 0000 0077 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0078 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000ce bfe9      	OUT  0x39,R30
                 ; 0000 0079 
                 ; 0000 007A // External Interrupt(s) initialization
                 ; 0000 007B // INT0: Off
                 ; 0000 007C // INT1: Off
                 ; 0000 007D // INT2: Off
                 ; 0000 007E MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000cf bfe5      	OUT  0x35,R30
                 ; 0000 007F MCUCSR=(0<<ISC2);
0000d0 bfe4      	OUT  0x34,R30
                 ; 0000 0080 
                 ; 0000 0081 // USART initialization
                 ; 0000 0082 // USART disabled
                 ; 0000 0083 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d1 b9ea      	OUT  0xA,R30
                 ; 0000 0084 
                 ; 0000 0085 // Analog Comparator initialization
                 ; 0000 0086 // Analog Comparator: Off
                 ; 0000 0087 // The Analog Comparator's positive input is
                 ; 0000 0088 // connected to the AIN0 pin
                 ; 0000 0089 // The Analog Comparator's negative input is
                 ; 0000 008A // connected to the AIN1 pin
                 ; 0000 008B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000d2 e8e0      	LDI  R30,LOW(128)
0000d3 b9e8      	OUT  0x8,R30
                 ; 0000 008C 
                 ; 0000 008D // ADC initialization
                 ; 0000 008E // ADC Clock frequency: 1000.000 kHz
                 ; 0000 008F // ADC Voltage Reference: AREF pin
                 ; 0000 0090 // ADC Auto Trigger Source: Free Running
                 ; 0000 0091 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000d4 e0e0      	LDI  R30,LOW(0)
0000d5 b9e7      	OUT  0x7,R30
                 ; 0000 0092 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000d6 eeeb      	LDI  R30,LOW(235)
0000d7 b9e6      	OUT  0x6,R30
                 ; 0000 0093 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 bfe0      	OUT  0x30,R30
                 ; 0000 0094 
                 ; 0000 0095 // SPI initialization
                 ; 0000 0096 // SPI disabled
                 ; 0000 0097 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000da b9ed      	OUT  0xD,R30
                 ; 0000 0098 
                 ; 0000 0099 // TWI initialization
                 ; 0000 009A // TWI disabled
                 ; 0000 009B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000db bfe6      	OUT  0x36,R30
                 ; 0000 009C 
                 ; 0000 009D // Global enable interrupts
                 ; 0000 009E #asm("sei")
0000dc 9478      	sei
                 ; 0000 009F 
                 ; 0000 00A0 while (1)
                 _0xD:
                 ; 0000 00A1       {
                 ; 0000 00A2           temp = (500 * (unsigned int)adc_data[0]) / 1023;
0000dd 91e0 016a 	LDS  R30,_adc_data
0000df 91f0 016b 	LDS  R31,_adc_data+1
0000e1 efa4      	LDI  R26,LOW(500)
0000e2 e0b1      	LDI  R27,HIGH(500)
0000e3 940e 00ff 	CALL __MULW12U
0000e5 01df      	MOVW R26,R30
0000e6 efef      	LDI  R30,LOW(1023)
0000e7 e0f3      	LDI  R31,HIGH(1023)
0000e8 940e 0107 	CALL __DIVW21U
0000ea 013f      	MOVW R6,R30
                 ; 0000 00A3           show(temp);
0000eb 01d3      	MOVW R26,R6
0000ec dfa0      	RCALL _show
                 ; 0000 00A4       }
0000ed cfef      	RJMP _0xD
                 ; 0000 00A5 }
                 _0x10:
0000ee cfff      	RJMP _0x10
                 ; .FEND
                 ;
                 ;/*
                 ;su dung ADC 10 bit
                 ;
                 ;LM35: dien ap 10mV => 1 do
                 ;
                 ;dien ap = ( 5 * adc_data[0] ) / 1023
                 ;nhiet do = dien ap * 100
                 ;
                 ;nhiet do = ( (dien ap * 100) * (unsigned int)adc_data[0] ) / 1023
                 ;
                 ;*/
                 
                 	.DSEG
                 _number:
000160           	.BYTE 0xA
                 _adc_data:
00016a           	.BYTE 0x2
                 _input_index_S0000000000:
00016c           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0000ef 91ec      	LD   R30,X
0000f0 bbe5      	OUT  0x15,R30
0000f1 e0aa      	LDI  R26,LOW(10)
0000f2 e0b0      	LDI  R27,0
0000f3 940c 00f5 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0000f5 9610      	adiw r26,0
0000f6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0000f7 ed80     +LDI R24 , LOW ( 0x7D0 )
0000f8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0000f9 9701     +SBIW R24 , 1
0000fa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0000fb 95a8      	wdr
0000fc 9711      	sbiw r26,1
0000fd f7c9      	brne __delay_ms0
                 __delay_ms1:
0000fe 9508      	ret
                 
                 __MULW12U:
0000ff 9ffa      	MUL  R31,R26
000100 2df0      	MOV  R31,R0
000101 9feb      	MUL  R30,R27
000102 0df0      	ADD  R31,R0
000103 9fea      	MUL  R30,R26
000104 2de0      	MOV  R30,R0
000105 0df1      	ADD  R31,R1
000106 9508      	RET
                 
                 __DIVW21U:
000107 2400      	CLR  R0
000108 2411      	CLR  R1
000109 e190      	LDI  R25,16
                 __DIVW21U1:
00010a 0faa      	LSL  R26
00010b 1fbb      	ROL  R27
00010c 1c00      	ROL  R0
00010d 1c11      	ROL  R1
00010e 1a0e      	SUB  R0,R30
00010f 0a1f      	SBC  R1,R31
000110 f418      	BRCC __DIVW21U2
000111 0e0e      	ADD  R0,R30
000112 1e1f      	ADC  R1,R31
000113 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000114 60a1      	SBR  R26,1
                 __DIVW21U3:
000115 959a      	DEC  R25
000116 f799      	BRNE __DIVW21U1
000117 01fd      	MOVW R30,R26
000118 01d0      	MOVW R26,R0
000119 9508      	RET
                 
                 __MODW21U:
00011a dfec      	RCALL __DIVW21U
00011b 01fd      	MOVW R30,R26
00011c 9508      	RET
                 
                 __SAVELOCR4:
00011d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00011e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00011f 931a      	ST   -Y,R17
000120 930a      	ST   -Y,R16
000121 9508      	RET
                 
                 __LOADLOCR4:
000122 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000123 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000124 8119      	LDD  R17,Y+1
000125 8108      	LD   R16,Y
000126 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  12 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   3 r18:   4 r19:   3 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  13 r25:   5 r26:  31 r27:  17 r28:   2 r29:   1 r30:  89 r31:  20 
x  :   6 y  :  26 z  :   7 
Registers used: 19 out of 35 (54.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   6 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   6 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   1 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   0 jmp   :  23 ld    :   8 ldd   :   7 ldi   :  42 
lds   :   5 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   2 movw  :  11 
mul   :   3 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  44 pop   :   0 push  :   0 rcall :   4 ret   :   7 
reti  :   1 rjmp  :   4 rol   :   4 ror   :   0 sbc   :   1 sbci  :   0 
sbi   :   3 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  17 std   :   0 sts   :   2 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 40 out of 116 (34.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00024e    572     18    590   16384   3.6%
[.dseg] 0x000060 0x00016d      0     13     13    1024   1.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
