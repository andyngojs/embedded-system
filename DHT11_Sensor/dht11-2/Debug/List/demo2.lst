
AVRASM ver. 2.1.30  F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm Tue Oct 26 17:18:25 2021

F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm(1090): warning: Register r6 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm(1091): warning: Register r7 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm(1092): warning: Register r9 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm(1093): warning: Register r8 already defined by the .DEF directive
F:\Electronics\AVR\DHT11_Sensor\dht11-2\Debug\List\demo2.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temperature=R4
                 	.DEF _temperature_msb=R5
                 	.DEF _humidity=R6
                 	.DEF _humidity_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000035 7548
000036 3a6d
000037 0020
000038 0025      	.DB  0x48,0x75,0x6D,0x3A,0x20,0x0,0x25,0x0
000039 3a54
00003a 0020
00003b 0043      	.DB  0x54,0x3A,0x20,0x0,0x43,0x0
                 _0x2020003:
00003c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003d 0004      	.DW  0x04
00003e 0004      	.DW  0x04
00003f 0066      	.DW  __REG_VARS*2
                 
000040 0002      	.DW  0x02
000041 0160      	.DW  __base_y_G101
000042 0078      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004b e08d      	LDI  R24,(14-2)+1
00004c e0a2      	LDI  R26,2
00004d 27bb      	CLR  R27
                 __CLEAR_REG:
00004e 93ed      	ST   X+,R30
00004f 958a      	DEC  R24
000050 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000051 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000052 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000053 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000054 93ed      	ST   X+,R30
000055 9701      	SBIW R24,1
000056 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000057 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000058 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000059 9185      	LPM  R24,Z+
00005a 9195      	LPM  R25,Z+
00005b 9700      	SBIW R24,0
00005c f061      	BREQ __GLOBAL_INI_END
00005d 91a5      	LPM  R26,Z+
00005e 91b5      	LPM  R27,Z+
00005f 9005      	LPM  R0,Z+
000060 9015      	LPM  R1,Z+
000061 01bf      	MOVW R22,R30
000062 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000063 9005      	LPM  R0,Z+
000064 920d      	ST   X+,R0
000065 9701      	SBIW R24,1
000066 f7e1      	BRNE __GLOBAL_INI_LOOP
000067 01fb      	MOVW R30,R22
000068 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000069 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006a bfed      	OUT  SPL,R30
00006b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006f 940c 008e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "include/dht.h"
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;int temperature = 0;
                 ;int humidity = 0;
                 ;
                 ;void readData(int number) {
                 ; 0000 000B void readData(int number) {
                 
                 	.CSEG
                 _readData:
                 ; .FSTART _readData
                 ; 0000 000C     int x;
                 ; 0000 000D      x = number;
000071 93ba      	ST   -Y,R27
000072 93aa      	ST   -Y,R26
000073 931a      	ST   -Y,R17
000074 930a      	ST   -Y,R16
                 ;	number -> Y+2
                 ;	x -> R16,R17
                +
000075 810a     +LDD R16 , Y + 2
000076 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
                 ; 0000 000E      lcd_putchar(x/10+48);
000077 01d8      	MOVW R26,R16
000078 e0ea      	LDI  R30,LOW(10)
000079 e0f0      	LDI  R31,HIGH(10)
00007a 940e 0400 	CALL __DIVW21
00007c 5de0      	SUBI R30,-LOW(48)
00007d 2fae      	MOV  R26,R30
00007e 940e 0211 	CALL _lcd_putchar
                 ; 0000 000F      x = x % 10;
000080 01d8      	MOVW R26,R16
000081 e0ea      	LDI  R30,LOW(10)
000082 e0f0      	LDI  R31,HIGH(10)
000083 940e 0405 	CALL __MODW21
000085 018f      	MOVW R16,R30
                 ; 0000 0010      lcd_putchar(x+48);
000086 2fa0      	MOV  R26,R16
000087 5da0      	SUBI R26,-LOW(48)
000088 940e 0211 	CALL _lcd_putchar
                 ; 0000 0011 }
00008a 8119      	LDD  R17,Y+1
00008b 8108      	LDD  R16,Y+0
00008c 9624      	ADIW R28,4
00008d 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0014 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0015 // Declare your local variables here
                 ; 0000 0016 
                 ; 0000 0017 // Input/Output Ports initialization
                 ; 0000 0018 // Port A initialization
                 ; 0000 0019 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00008e e0e0      	LDI  R30,LOW(0)
00008f bbea      	OUT  0x1A,R30
                 ; 0000 001B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000090 bbeb      	OUT  0x1B,R30
                 ; 0000 001D 
                 ; 0000 001E // Port B initialization
                 ; 0000 001F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0020 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000091 bbe7      	OUT  0x17,R30
                 ; 0000 0021 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0022 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000092 bbe8      	OUT  0x18,R30
                 ; 0000 0023 
                 ; 0000 0024 // Port C initialization
                 ; 0000 0025 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0026 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000093 efef      	LDI  R30,LOW(255)
000094 bbe4      	OUT  0x14,R30
                 ; 0000 0027 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0028 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000095 e0e0      	LDI  R30,LOW(0)
000096 bbe5      	OUT  0x15,R30
                 ; 0000 0029 
                 ; 0000 002A // Port D initialization
                 ; 0000 002B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002C DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000097 bbe1      	OUT  0x11,R30
                 ; 0000 002D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000098 bbe2      	OUT  0x12,R30
                 ; 0000 002F 
                 ; 0000 0030 // Timer/Counter 0 initialization
                 ; 0000 0031 // Clock source: System Clock
                 ; 0000 0032 // Clock value: Timer 0 Stopped
                 ; 0000 0033 // Mode: Normal top=0xFF
                 ; 0000 0034 // OC0 output: Disconnected
                 ; 0000 0035 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000099 bfe3      	OUT  0x33,R30
                 ; 0000 0036 TCNT0=0x00;
00009a bfe2      	OUT  0x32,R30
                 ; 0000 0037 OCR0=0x00;
00009b bfec      	OUT  0x3C,R30
                 ; 0000 0038 
                 ; 0000 0039 // Timer/Counter 1 initialization
                 ; 0000 003A // Clock source: System Clock
                 ; 0000 003B // Clock value: Timer1 Stopped
                 ; 0000 003C // Mode: Normal top=0xFFFF
                 ; 0000 003D // OC1A output: Disconnected
                 ; 0000 003E // OC1B output: Disconnected
                 ; 0000 003F // Noise Canceler: Off
                 ; 0000 0040 // Input Capture on Falling Edge
                 ; 0000 0041 // Timer1 Overflow Interrupt: Off
                 ; 0000 0042 // Input Capture Interrupt: Off
                 ; 0000 0043 // Compare A Match Interrupt: Off
                 ; 0000 0044 // Compare B Match Interrupt: Off
                 ; 0000 0045 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00009c bdef      	OUT  0x2F,R30
                 ; 0000 0046 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00009d bdee      	OUT  0x2E,R30
                 ; 0000 0047 TCNT1H=0x00;
00009e bded      	OUT  0x2D,R30
                 ; 0000 0048 TCNT1L=0x00;
00009f bdec      	OUT  0x2C,R30
                 ; 0000 0049 ICR1H=0x00;
0000a0 bde7      	OUT  0x27,R30
                 ; 0000 004A ICR1L=0x00;
0000a1 bde6      	OUT  0x26,R30
                 ; 0000 004B OCR1AH=0x00;
0000a2 bdeb      	OUT  0x2B,R30
                 ; 0000 004C OCR1AL=0x00;
0000a3 bdea      	OUT  0x2A,R30
                 ; 0000 004D OCR1BH=0x00;
0000a4 bde9      	OUT  0x29,R30
                 ; 0000 004E OCR1BL=0x00;
0000a5 bde8      	OUT  0x28,R30
                 ; 0000 004F 
                 ; 0000 0050 // Timer/Counter 2 initialization
                 ; 0000 0051 // Clock source: System Clock
                 ; 0000 0052 // Clock value: Timer2 Stopped
                 ; 0000 0053 // Mode: Normal top=0xFF
                 ; 0000 0054 // OC2 output: Disconnected
                 ; 0000 0055 ASSR=0<<AS2;
0000a6 bde2      	OUT  0x22,R30
                 ; 0000 0056 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000a7 bde5      	OUT  0x25,R30
                 ; 0000 0057 TCNT2=0x00;
0000a8 bde4      	OUT  0x24,R30
                 ; 0000 0058 OCR2=0x00;
0000a9 bde3      	OUT  0x23,R30
                 ; 0000 0059 
                 ; 0000 005A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000aa bfe9      	OUT  0x39,R30
                 ; 0000 005C 
                 ; 0000 005D // External Interrupt(s) initialization
                 ; 0000 005E // INT0: Off
                 ; 0000 005F // INT1: Off
                 ; 0000 0060 // INT2: Off
                 ; 0000 0061 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ab bfe5      	OUT  0x35,R30
                 ; 0000 0062 MCUCSR=(0<<ISC2);
0000ac bfe4      	OUT  0x34,R30
                 ; 0000 0063 
                 ; 0000 0064 // USART initialization
                 ; 0000 0065 // USART disabled
                 ; 0000 0066 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000ad b9ea      	OUT  0xA,R30
                 ; 0000 0067 
                 ; 0000 0068 // Analog Comparator initialization
                 ; 0000 0069 // Analog Comparator: Off
                 ; 0000 006A // The Analog Comparator's positive input is
                 ; 0000 006B // connected to the AIN0 pin
                 ; 0000 006C // The Analog Comparator's negative input is
                 ; 0000 006D // connected to the AIN1 pin
                 ; 0000 006E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000ae e8e0      	LDI  R30,LOW(128)
0000af b9e8      	OUT  0x8,R30
                 ; 0000 006F SFIOR=(0<<ACME);
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 bfe0      	OUT  0x30,R30
                 ; 0000 0070 
                 ; 0000 0071 // ADC initialization
                 ; 0000 0072 // ADC disabled
                 ; 0000 0073 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000b2 b9e6      	OUT  0x6,R30
                 ; 0000 0074 
                 ; 0000 0075 // SPI initialization
                 ; 0000 0076 // SPI disabled
                 ; 0000 0077 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000b3 b9ed      	OUT  0xD,R30
                 ; 0000 0078 
                 ; 0000 0079 // TWI initialization
                 ; 0000 007A // TWI disabled
                 ; 0000 007B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000b4 bfe6      	OUT  0x36,R30
                 ; 0000 007C 
                 ; 0000 007D // Alphanumeric LCD initialization
                 ; 0000 007E // Connections are specified in the
                 ; 0000 007F // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0080 // RS - PORTC Bit 0
                 ; 0000 0081 // RD - PORTC Bit 2
                 ; 0000 0082 // EN - PORTC Bit 1
                 ; 0000 0083 // D4 - PORTC Bit 4
                 ; 0000 0084 // D5 - PORTC Bit 5
                 ; 0000 0085 // D6 - PORTC Bit 6
                 ; 0000 0086 // D7 - PORTC Bit 7
                 ; 0000 0087 // Characters/line: 16
                 ; 0000 0088 lcd_init(16);
0000b5 e1a0      	LDI  R26,LOW(16)
0000b6 940e 0239 	CALL _lcd_init
                 ; 0000 0089 
                 ; 0000 008A while (1)
                 _0x3:
                 ; 0000 008B       {
                 ; 0000 008C       delay_ms(1);
0000b8 e0a1      	LDI  R26,LOW(1)
0000b9 e0b0      	LDI  R27,0
0000ba 940e 02d1 	CALL _delay_ms
                 ; 0000 008D       humidity = dht_gethumidity(0);
0000bc e0a0      	LDI  R26,LOW(0)
0000bd e0b0      	LDI  R27,0
0000be d10d      	RCALL _dht_gethumidity
0000bf 013f      	MOVW R6,R30
                 ; 0000 008E       temperature = dht_gettemperature(0);
0000c0 e0a0      	LDI  R26,LOW(0)
0000c1 e0b0      	LDI  R27,0
0000c2 d0fe      	RCALL _dht_gettemperature
0000c3 012f      	MOVW R4,R30
                 ; 0000 008F       lcd_gotoxy(0,0);
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 93ea      	ST   -Y,R30
0000c6 e0a0      	LDI  R26,LOW(0)
0000c7 940e 01f8 	CALL _lcd_gotoxy
                 ; 0000 0090       lcd_putsf("Hum: ");
                +
0000c9 e6aa     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000ca e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000cb 940e 0226 	CALL _lcd_putsf
                 ; 0000 0091       readData(humidity);
0000cd 01d3      	MOVW R26,R6
0000ce dfa2      	RCALL _readData
                 ; 0000 0092       lcd_putsf("%");
                +
0000cf e7a0     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
0000d0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
0000d1 940e 0226 	CALL _lcd_putsf
                 ; 0000 0093 
                 ; 0000 0094       lcd_gotoxy(0,1);
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 93ea      	ST   -Y,R30
0000d5 e0a1      	LDI  R26,LOW(1)
0000d6 940e 01f8 	CALL _lcd_gotoxy
                 ; 0000 0095       lcd_putsf("T: ");
                +
0000d8 e7a2     +LDI R26 , LOW ( 2 * _0x0 + ( 8 ) )
0000d9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW2FN _0x0,8
0000da 940e 0226 	CALL _lcd_putsf
                 ; 0000 0096       readData(temperature);
0000dc 01d2      	MOVW R26,R4
0000dd df93      	RCALL _readData
                 ; 0000 0097       lcd_putchar(223);
0000de edaf      	LDI  R26,LOW(223)
0000df 940e 0211 	CALL _lcd_putchar
                 ; 0000 0098       lcd_putsf("C");
                +
0000e1 e7a6     +LDI R26 , LOW ( 2 * _0x0 + ( 12 ) )
0000e2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW2FN _0x0,12
0000e3 940e 0226 	CALL _lcd_putsf
                 ; 0000 0099       }
0000e5 cfd2      	RJMP _0x3
                 ; 0000 009A }
                 _0x6:
0000e6 cfff      	RJMP _0x6
                 ; .FEND
                 ;/*
                 ;DHT Library 0x03
                 ;
                 ;copyright (c) Davide Gironi, 2012
                 ;
                 ;Released under GPLv3.
                 ;Please refer to LICENSE file for licensing information.
                 ;*/
                 ;
                 ;
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <string.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;#include "dht.h"
                 ;
                 ;/*
                 ; * get data from sensor
                 ; */
                 ;#if DHT_FLOAT == 1
                 ;int dht_getdata(float *temperature, float *humidity) {
                 ; 0001 0016 int dht_getdata(float *temperature, float *humidity) {
                 
                 	.CSEG
                 _dht_getdata:
                 ; .FSTART _dht_getdata
                 ; 0001 0017 #elif DHT_FLOAT == 0
                 ; 0001 0018 int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
                 ; 0001 0019 #endif
                 ; 0001 001A 	int bits[5];
                 ; 0001 001B 	int i,j = 0;
                 ; 0001 001C 
                 ; 0001 001D 	memset(bits, 0, sizeof(bits));
0000e7 93ba      	ST   -Y,R27
0000e8 93aa      	ST   -Y,R26
0000e9 972a      	SBIW R28,10
0000ea 940e 0426 	CALL __SAVELOCR4
                 ;	*temperature -> Y+16
                 ;	*humidity -> Y+14
                 ;	bits -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
0000ec e020     +LDI R18 , LOW ( 0 )
0000ed e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0000ee 01fe      	MOVW R30,R28
0000ef 9634      	ADIW R30,4
0000f0 93fa      	ST   -Y,R31
0000f1 93ea      	ST   -Y,R30
0000f2 e0e0      	LDI  R30,LOW(0)
0000f3 93ea      	ST   -Y,R30
0000f4 e0aa      	LDI  R26,LOW(10)
0000f5 e0b0      	LDI  R27,0
0000f6 940e 0267 	CALL _memset
                 ; 0001 001E 
                 ; 0001 001F 	//reset port
                 ; 0001 0020 	DHT_DDR |= (1<<DHT_INPUTPIN); //output
0000f8 940e 0277 	CALL SUBOPT_0x0
0000fa 940e 027f 	CALL SUBOPT_0x1
                 ; 0001 0021 	DHT_PORT |= (1<<DHT_INPUTPIN); //high
                 ; 0001 0022 	delay_ms(100);
                 ; 0001 0023 
                 ; 0001 0024 	//send request
                 ; 0001 0025 	DHT_PORT &= ~(1<<DHT_INPUTPIN); //low
0000fc 940e 028e 	CALL SUBOPT_0x2
0000fe 95e0      	COM  R30
0000ff 21e1      	AND  R30,R1
000100 bbeb      	OUT  0x1B,R30
                 ; 0001 0026 	#if DHT_TYPE == DHT_DHT11
                 ; 0001 0027 	delay_ms(18);
                 ; 0001 0028 	#elif DHT_TYPE == DHT_DHT22
                 ; 0001 0029 	delay_us(500);
                +
000101 ee88     +LDI R24 , LOW ( 1000 )
000102 e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
000103 9701     +SBIW R24 , 1
000104 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
                 ; 0001 002A 	#endif
                 ; 0001 002B 	DHT_PORT |= (1<<DHT_INPUTPIN); //high
000105 940e 028e 	CALL SUBOPT_0x2
000107 29e1      	OR   R30,R1
000108 bbeb      	OUT  0x1B,R30
                 ; 0001 002C 	DHT_DDR &= ~(1<<DHT_INPUTPIN); //input
000109 940e 0277 	CALL SUBOPT_0x0
00010b 95e0      	COM  R30
00010c 21e1      	AND  R30,R1
00010d bbea      	OUT  0x1A,R30
                 ; 0001 002D 	delay_us(40);
                +
00010e e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
00010f 958a     +DEC R24
000110 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0001 002E 
                 ; 0001 002F 	//check start condition 1
                 ; 0001 0030 	if((DHT_PIN & (1<<DHT_INPUTPIN))) {
000111 940e 0296 	CALL SUBOPT_0x3
000113 f009      	BREQ _0x20003
                 ; 0001 0031 		return -1;
000114 c0a6      	RJMP _0x2080004
                 ; 0001 0032 	}
                 ; 0001 0033 	delay_us(80);
                 _0x20003:
                +
000115 ed85     +LDI R24 , LOW ( 213 )
                +__DELAY_USB_LOOP :
000116 958a     +DEC R24
000117 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 213
                 ; 0001 0034 	//check start condition 2
                 ; 0001 0035 	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
000118 940e 0296 	CALL SUBOPT_0x3
00011a f409      	BRNE _0x20004
                 ; 0001 0036 		return -1;
00011b c09f      	RJMP _0x2080004
                 ; 0001 0037 	}
                 ; 0001 0038 	delay_us(80);
                 _0x20004:
                +
00011c ed85     +LDI R24 , LOW ( 213 )
                +__DELAY_USB_LOOP :
00011d 958a     +DEC R24
00011e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 213
                 ; 0001 0039 
                 ; 0001 003A 	//read the data
                 ; 0001 003B 	for (j=0; j<5; j++) { //read 5 byte
                +
00011f e020     +LDI R18 , LOW ( 0 )
000120 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x20006:
                +
000121 3025     +CPI R18 , LOW ( 5 )
000122 e0e0     +LDI R30 , HIGH ( 5 )
000123 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
000124 f00c      	BRLT PC+2
000125 c04a      	RJMP _0x20007
                 ; 0001 003C 	    int result=0;
                 ; 0001 003D         int timeoutcounter = 0;
                 ; 0001 003E 		for(i=0; i<8; i++) {//read every bit
000126 940e 02a4 	CALL SUBOPT_0x4
                 ;	*temperature -> Y+20
                 ;	*humidity -> Y+18
                 ;	bits -> Y+8
                 ;	result -> Y+2
                 ;	timeoutcounter -> Y+0
                +
000128 e000     +LDI R16 , LOW ( 0 )
000129 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20009:
                +
00012a 3008     +CPI R16 , LOW ( 8 )
00012b e0e0     +LDI R30 , HIGH ( 8 )
00012c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00012d f59c      	BRGE _0x2000A
                 ; 0001 003F 			timeoutcounter = 0;
00012e e0e0      	LDI  R30,LOW(0)
00012f 83e8      	STD  Y+0,R30
000130 83e9      	STD  Y+0+1,R30
                 ; 0001 0040 			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
                 _0x2000B:
000131 940e 0296 	CALL SUBOPT_0x3
000133 f441      	BRNE _0x2000D
                 ; 0001 0041 				timeoutcounter++;
000134 940e 02ab 	CALL SUBOPT_0x5
                 ; 0001 0042 				if(timeoutcounter > DHT_TIMEOUT) {
000136 f024      	BRLT _0x2000E
                 ; 0001 0043 					return -1; //timeout
000137 efef      	LDI  R30,LOW(65535)
000138 efff      	LDI  R31,HIGH(65535)
000139 9624      	ADIW R28,4
00013a c082      	RJMP _0x2080003
                 ; 0001 0044 				}
                 ; 0001 0045 			}
                 _0x2000E:
00013b cff5      	RJMP _0x2000B
                 _0x2000D:
                 ; 0001 0046 			delay_us(30);
                +
00013c e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
00013d 958a     +DEC R24
00013e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 0047 			if(DHT_PIN & (1<<DHT_INPUTPIN)) //if input is high after 30 us, get result
00013f 940e 0296 	CALL SUBOPT_0x3
000141 f071      	BREQ _0x2000F
                 ; 0001 0048 				result |= (1<<(7-i));
000142 e0e7      	LDI  R30,LOW(7)
000143 e0f0      	LDI  R31,HIGH(7)
000144 1be0      	SUB  R30,R16
000145 0bf1      	SBC  R31,R17
000146 e0a1      	LDI  R26,LOW(1)
000147 e0b0      	LDI  R27,HIGH(1)
000148 940e 03df 	CALL __LSLW12
00014a 81aa      	LDD  R26,Y+2
00014b 81bb      	LDD  R27,Y+2+1
00014c 2bea      	OR   R30,R26
00014d 2bfb      	OR   R31,R27
00014e 83ea      	STD  Y+2,R30
00014f 83fb      	STD  Y+2+1,R31
                 ; 0001 0049 			timeoutcounter = 0;
                 _0x2000F:
000150 e0e0      	LDI  R30,LOW(0)
000151 83e8      	STD  Y+0,R30
000152 83e9      	STD  Y+0+1,R30
                 ; 0001 004A 			while(DHT_PIN & (1<<DHT_INPUTPIN)) { //wait until input get low (non blocking)
                 _0x20010:
000153 940e 0296 	CALL SUBOPT_0x3
000155 f041      	BREQ _0x20012
                 ; 0001 004B 				timeoutcounter++;
000156 940e 02ab 	CALL SUBOPT_0x5
                 ; 0001 004C 				if(timeoutcounter > DHT_TIMEOUT) {
000158 f024      	BRLT _0x20013
                 ; 0001 004D 					return -1; //timeout
000159 efef      	LDI  R30,LOW(65535)
00015a efff      	LDI  R31,HIGH(65535)
00015b 9624      	ADIW R28,4
00015c c060      	RJMP _0x2080003
                 ; 0001 004E 				}
                 ; 0001 004F 			}
                 _0x20013:
00015d cff5      	RJMP _0x20010
                 _0x20012:
                 ; 0001 0050 		}
                +
00015e 5f0f     +SUBI R16 , LOW ( - 1 )
00015f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000160 cfc9      	RJMP _0x20009
                 _0x2000A:
                 ; 0001 0051 		bits[j] = result;
000161 01f9      	MOVW R30,R18
000162 01de      	MOVW R26,R28
000163 9618      	ADIW R26,8
000164 0fee      	LSL  R30
000165 1fff      	ROL  R31
000166 0fea      	ADD  R30,R26
000167 1ffb      	ADC  R31,R27
000168 81aa      	LDD  R26,Y+2
000169 81bb      	LDD  R27,Y+2+1
00016a 83a0      	STD  Z+0,R26
00016b 83b1      	STD  Z+1,R27
                 ; 0001 0052 	}
00016c 9624      	ADIW R28,4
                +
00016d 5f2f     +SUBI R18 , LOW ( - 1 )
00016e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00016f cfb1      	RJMP _0x20006
                 _0x20007:
                 ; 0001 0053 
                 ; 0001 0054 	//reset port
                 ; 0001 0055 	DHT_DDR |= (1<<DHT_INPUTPIN); //output
000170 940e 0277 	CALL SUBOPT_0x0
000172 940e 027f 	CALL SUBOPT_0x1
                 ; 0001 0056 	DHT_PORT |= (1<<DHT_INPUTPIN); //low
                 ; 0001 0057 	delay_ms(100);
                 ; 0001 0058 
                 ; 0001 0059 	//check checksum
                 ; 0001 005A 	if ((int)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
000174 81ee      	LDD  R30,Y+6
000175 81ff      	LDD  R31,Y+6+1
000176 81ac      	LDD  R26,Y+4
000177 81bd      	LDD  R27,Y+4+1
000178 0fea      	ADD  R30,R26
000179 1ffb      	ADC  R31,R27
00017a 85a8      	LDD  R26,Y+8
00017b 85b9      	LDD  R27,Y+8+1
00017c 0fea      	ADD  R30,R26
00017d 1ffb      	ADC  R31,R27
00017e 85aa      	LDD  R26,Y+10
00017f 85bb      	LDD  R27,Y+10+1
000180 0fae      	ADD  R26,R30
000181 1fbf      	ADC  R27,R31
000182 85ec      	LDD  R30,Y+12
000183 85fd      	LDD  R31,Y+12+1
000184 17ea      	CP   R30,R26
000185 07fb      	CPC  R31,R27
000186 f5a1      	BRNE _0x20014
                 ; 0001 005B 		//return temperature and humidity
                 ; 0001 005C 		#if DHT_TYPE == DHT_DHT11
                 ; 0001 005D 		*temperature = bits[2];
                 ; 0001 005E 		*humidity = bits[0];
                 ; 0001 005F 		#elif DHT_TYPE == DHT_DHT22
                 ; 0001 0060 		int rawhumidity = bits[0]<<8 | bits[1];
                 ; 0001 0061 		int rawtemperature = bits[2]<<8 | bits[3];
                 ; 0001 0062 		if(rawtemperature & 0x8000) {
000187 9724      	SBIW R28,4
                 ;	*temperature -> Y+20
                 ;	*humidity -> Y+18
                 ;	bits -> Y+8
                 ;	rawhumidity -> Y+2
                 ;	rawtemperature -> Y+0
000188 85f8      	LDD  R31,Y+8
000189 e0e0      	LDI  R30,LOW(0)
00018a 85aa      	LDD  R26,Y+10
00018b 85bb      	LDD  R27,Y+10+1
00018c 2bea      	OR   R30,R26
00018d 2bfb      	OR   R31,R27
00018e 83ea      	STD  Y+2,R30
00018f 83fb      	STD  Y+2+1,R31
000190 85fc      	LDD  R31,Y+12
000191 e0e0      	LDI  R30,LOW(0)
000192 85ae      	LDD  R26,Y+14
000193 85bf      	LDD  R27,Y+14+1
000194 2bea      	OR   R30,R26
000195 2bfb      	OR   R31,R27
000196 83e8      	ST   Y,R30
000197 83f9      	STD  Y+1,R31
000198 81e9      	LDD  R30,Y+1
000199 78e0      	ANDI R30,LOW(0x80)
00019a f061      	BREQ _0x20015
                 ; 0001 0063 			*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
00019b 81e8      	LD   R30,Y
00019c 81f9      	LDD  R31,Y+1
00019d 77ff      	ANDI R31,HIGH(0x7FFF)
00019e 940e 02b6 	CALL SUBOPT_0x6
                +
0001a0 e0a0     +LDI R26 , LOW ( 0xBF800000 )
0001a1 e0b0     +LDI R27 , HIGH ( 0xBF800000 )
0001a2 e880     +LDI R24 , BYTE3 ( 0xBF800000 )
0001a3 eb9f     +LDI R25 , BYTE4 ( 0xBF800000 )
                 	__GETD2N 0xBF800000
0001a4 940e 0338 	CALL __MULF12
0001a6 c004      	RJMP _0x20017
                 ; 0001 0064 		} else {
                 _0x20015:
                 ; 0001 0065 			*temperature = (float)(rawtemperature)/10.0;
0001a7 81e8      	LD   R30,Y
0001a8 81f9      	LDD  R31,Y+1
0001a9 940e 02b6 	CALL SUBOPT_0x6
                 _0x20017:
0001ab 89ac      	LDD  R26,Y+20
0001ac 89bd      	LDD  R27,Y+20+1
0001ad 940e 0421 	CALL __PUTDP1
                 ; 0001 0066 		}
                 ; 0001 0067 		*humidity = (float)(rawhumidity)/10.0;
0001af 81ea      	LDD  R30,Y+2
0001b0 81fb      	LDD  R31,Y+2+1
0001b1 940e 02b6 	CALL SUBOPT_0x6
0001b3 89aa      	LDD  R26,Y+18
0001b4 89bb      	LDD  R27,Y+18+1
0001b5 940e 0421 	CALL __PUTDP1
                 ; 0001 0068 		#endif
                 ; 0001 0069 		return 0;
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 e0f0      	LDI  R31,HIGH(0)
0001b9 9624      	ADIW R28,4
0001ba c002      	RJMP _0x2080003
                 ; 0001 006A 	}
                 ; 0001 006B 
                 ; 0001 006C 	return -1;
                 _0x20014:
                 _0x2080004:
0001bb efef      	LDI  R30,LOW(65535)
0001bc efff      	LDI  R31,HIGH(65535)
                 _0x2080003:
0001bd 940e 042b 	CALL __LOADLOCR4
0001bf 9662      	ADIW R28,18
0001c0 9508      	RET
                 ; 0001 006D }
                 ; .FEND
                 ;
                 ;/*
                 ; * get temperature
                 ; */
                 ;#if DHT_FLOAT == 1
                 ;int dht_gettemperature(float *temperature) {
                 ; 0001 0073 int dht_gettemperature(float *temperature) {
                 _dht_gettemperature:
                 ; .FSTART _dht_gettemperature
                 ; 0001 0074 	float humidity = 0;
                 ; 0001 0075 #elif DHT_FLOAT == 0
                 ; 0001 0076 int dht_gettemperature(int *temperature) {
                 ; 0001 0077 	int humidity = 0;
                 ; 0001 0078 #endif
                 ; 0001 0079 	return dht_getdata(temperature, &humidity);
0001c1 93ba      	ST   -Y,R27
0001c2 93aa      	ST   -Y,R26
0001c3 940e 02a4 	CALL SUBOPT_0x4
                 ;	*temperature -> Y+4
                 ;	humidity -> Y+0
0001c5 81ec      	LDD  R30,Y+4
0001c6 81fd      	LDD  R31,Y+4+1
0001c7 93fa      	ST   -Y,R31
0001c8 93ea      	ST   -Y,R30
0001c9 01de      	MOVW R26,R28
0001ca 9612      	ADIW R26,2
0001cb c009      	RJMP _0x2080002
                 ; 0001 007A }
                 ; .FEND
                 ;
                 ;/*
                 ; * get humidity
                 ; */
                 ;#if DHT_FLOAT == 1
                 ;int dht_gethumidity(float *humidity) {
                 ; 0001 0080 int dht_gethumidity(float *humidity) {
                 _dht_gethumidity:
                 ; .FSTART _dht_gethumidity
                 ; 0001 0081 	float temperature = 0;
                 ; 0001 0082 #elif DHT_FLOAT == 0
                 ; 0001 0083 int dht_gethumidity(int *humidity) {
                 ; 0001 0084 	int temperature = 0;
                 ; 0001 0085 #endif
                 ; 0001 0086 	return dht_getdata(&temperature, humidity);
0001cc 93ba      	ST   -Y,R27
0001cd 93aa      	ST   -Y,R26
0001ce 940e 02a4 	CALL SUBOPT_0x4
                 ;	*humidity -> Y+4
                 ;	temperature -> Y+0
0001d0 01fe      	MOVW R30,R28
0001d1 93fa      	ST   -Y,R31
0001d2 93ea      	ST   -Y,R30
0001d3 81ae      	LDD  R26,Y+6
0001d4 81bf      	LDD  R27,Y+6+1
                 _0x2080002:
0001d5 df11      	RCALL _dht_getdata
0001d6 9626      	ADIW R28,6
0001d7 9508      	RET
                 ; 0001 0087 }
                 ; .FEND
                 ;
                 ;/*
                 ; * get temperature and humidity
                 ; */
                 ;#if DHT_FLOAT == 1
                 ;int dht_gettemperaturehumidity(float *temperature, float *humidity) {
                 ; 0001 008D int dht_gettemperaturehumidity(float *temperature, float *humidity) {
                 ; 0001 008E #elif DHT_FLOAT == 0
                 ; 0001 008F 	int dht_gettemperaturehumidity(int *temperature, int *humidity) {
                 ; 0001 0090 #endif
                 ; 0001 0091 	return dht_getdata(temperature, humidity);
                 ;	*temperature -> Y+2
                 ;	*humidity -> Y+0
                 ; 0001 0092 }
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0001d8 93aa      	ST   -Y,R26
0001d9 b3e5      	IN   R30,0x15
0001da 70ef      	ANDI R30,LOW(0xF)
0001db 2fae      	MOV  R26,R30
0001dc 81e8      	LD   R30,Y
0001dd 7fe0      	ANDI R30,LOW(0xF0)
0001de 2bea      	OR   R30,R26
0001df bbe5      	OUT  0x15,R30
                +
0001e0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e1 958a     +DEC R24
0001e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e3 9aa9      	SBI  0x15,1
                +
0001e4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e5 958a     +DEC R24
0001e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e7 98a9      	CBI  0x15,1
                +
0001e8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e9 958a     +DEC R24
0001ea f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001eb c079      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ec 93aa      	ST   -Y,R26
0001ed 81a8      	LD   R26,Y
0001ee dfe9      	RCALL __lcd_write_nibble_G101
0001ef 81e8          ld    r30,y
0001f0 95e2          swap  r30
0001f1 83e8          st    y,r30
0001f2 81a8      	LD   R26,Y
0001f3 dfe4      	RCALL __lcd_write_nibble_G101
                +
0001f4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001f5 958a     +DEC R24
0001f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001f7 c06d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001f8 93aa      	ST   -Y,R26
0001f9 81e8      	LD   R30,Y
0001fa e0f0      	LDI  R31,0
0001fb 5ae0      	SUBI R30,LOW(-__base_y_G101)
0001fc 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0001fd 81e0      	LD   R30,Z
0001fe 81a9      	LDD  R26,Y+1
0001ff 0fae      	ADD  R26,R30
000200 dfeb      	RCALL __lcd_write_data
000201 8099      	LDD  R9,Y+1
000202 8088      	LDD  R8,Y+0
000203 9622      	ADIW R28,2
000204 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000205 e0a2      	LDI  R26,LOW(2)
000206 940e 02c3 	CALL SUBOPT_0x7
000208 e0ac      	LDI  R26,LOW(12)
000209 dfe2      	RCALL __lcd_write_data
00020a e0a1      	LDI  R26,LOW(1)
00020b 940e 02c3 	CALL SUBOPT_0x7
00020d e0e0      	LDI  R30,LOW(0)
00020e 2e8e      	MOV  R8,R30
00020f 2e9e      	MOV  R9,R30
000210 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000211 93aa      	ST   -Y,R26
000212 81a8      	LD   R26,Y
000213 30aa      	CPI  R26,LOW(0xA)
000214 f011      	BREQ _0x2020005
000215 149b      	CP   R9,R11
000216 f048      	BRLO _0x2020004
                 _0x2020005:
000217 e0e0      	LDI  R30,LOW(0)
000218 93ea      	ST   -Y,R30
000219 9483      	INC  R8
00021a 2da8      	MOV  R26,R8
00021b dfdc      	RCALL _lcd_gotoxy
00021c 81a8      	LD   R26,Y
00021d 30aa      	CPI  R26,LOW(0xA)
00021e f409      	BRNE _0x2020007
00021f c045      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000220 9493      	INC  R9
000221 9aa8      	SBI  0x15,0
000222 81a8      	LD   R26,Y
000223 dfc8      	RCALL __lcd_write_data
000224 98a8      	CBI  0x15,0
000225 c03f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000226 93ba      	ST   -Y,R27
000227 93aa      	ST   -Y,R26
000228 931a      	ST   -Y,R17
                 _0x202000B:
000229 81e9      	LDD  R30,Y+1
00022a 81fa      	LDD  R31,Y+1+1
00022b 9631      	ADIW R30,1
00022c 83e9      	STD  Y+1,R30
00022d 83fa      	STD  Y+1+1,R31
00022e 9731      	SBIW R30,1
00022f 91e4      	LPM  R30,Z
000230 2f1e      	MOV  R17,R30
000231 30e0      	CPI  R30,0
000232 f019      	BREQ _0x202000D
000233 2fa1      	MOV  R26,R17
000234 dfdc      	RCALL _lcd_putchar
000235 cff3      	RJMP _0x202000B
                 _0x202000D:
000236 8118      	LDD  R17,Y+0
000237 9623      	ADIW R28,3
000238 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000239 93aa      	ST   -Y,R26
00023a b3e4      	IN   R30,0x14
00023b 6fe0      	ORI  R30,LOW(0xF0)
00023c bbe4      	OUT  0x14,R30
00023d 9aa1      	SBI  0x14,1
00023e 9aa0      	SBI  0x14,0
00023f 9aa2      	SBI  0x14,2
000240 98a9      	CBI  0x15,1
000241 98a8      	CBI  0x15,0
000242 98aa      	CBI  0x15,2
000243 80b8      	LDD  R11,Y+0
000244 81e8      	LD   R30,Y
000245 58e0      	SUBI R30,-LOW(128)
                +
000246 93e0 0162+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000248 81e8      	LD   R30,Y
000249 54e0      	SUBI R30,-LOW(192)
                +
00024a 93e0 0163+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00024c e1a4      	LDI  R26,LOW(20)
00024d e0b0      	LDI  R27,0
00024e 940e 02d1 	CALL _delay_ms
000250 940e 02c9 	CALL SUBOPT_0x8
000252 940e 02c9 	CALL SUBOPT_0x8
000254 940e 02c9 	CALL SUBOPT_0x8
000256 e2a0      	LDI  R26,LOW(32)
000257 df80      	RCALL __lcd_write_nibble_G101
                +
000258 ec88     +LDI R24 , LOW ( 200 )
000259 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00025a 9701     +SBIW R24 , 1
00025b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00025c e2a8      	LDI  R26,LOW(40)
00025d df8e      	RCALL __lcd_write_data
00025e e0a4      	LDI  R26,LOW(4)
00025f df8c      	RCALL __lcd_write_data
000260 e8a5      	LDI  R26,LOW(133)
000261 df8a      	RCALL __lcd_write_data
000262 e0a6      	LDI  R26,LOW(6)
000263 df88      	RCALL __lcd_write_data
000264 dfa0      	RCALL _lcd_clear
                 _0x2080001:
000265 9621      	ADIW R28,1
000266 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000267 93ba      	ST   -Y,R27
000268 93aa      	ST   -Y,R26
000269 81b9          ldd  r27,y+1
00026a 81a8          ld   r26,y
00026b 9610          adiw r26,0
00026c f031          breq memset1
00026d 81fc          ldd  r31,y+4
00026e 81eb          ldd  r30,y+3
00026f 816a          ldd  r22,y+2
                 memset0:
000270 9361          st   z+,r22
000271 9711          sbiw r26,1
000272 f7e9          brne memset0
                 memset1:
000273 81eb          ldd  r30,y+3
000274 81fc          ldd  r31,y+4
000275 9625      	ADIW R28,5
000276 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000277 b21a      	IN   R1,26
000278 e0e0      	LDI  R30,0
000279 99d8      	SBIC 0x1B,0
00027a e0e1      	LDI  R30,1
00027b e0a1      	LDI  R26,LOW(1)
00027c 940e 03d7 	CALL __LSLB12
00027e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
00027f 29e1      	OR   R30,R1
000280 bbea      	OUT  0x1A,R30
000281 b21b      	IN   R1,27
000282 e0e0      	LDI  R30,0
000283 99d8      	SBIC 0x1B,0
000284 e0e1      	LDI  R30,1
000285 e0a1      	LDI  R26,LOW(1)
000286 940e 03d7 	CALL __LSLB12
000288 29e1      	OR   R30,R1
000289 bbeb      	OUT  0x1B,R30
00028a e6a4      	LDI  R26,LOW(100)
00028b e0b0      	LDI  R27,0
00028c 940c 02d1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00028e b21b      	IN   R1,27
00028f e0e0      	LDI  R30,0
000290 99d8      	SBIC 0x1B,0
000291 e0e1      	LDI  R30,1
000292 e0a1      	LDI  R26,LOW(1)
000293 940e 03d7 	CALL __LSLB12
000295 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x3:
000296 b219      	IN   R1,25
000297 e0e0      	LDI  R30,0
000298 99d8      	SBIC 0x1B,0
000299 e0e1      	LDI  R30,1
00029a e0a1      	LDI  R26,LOW(1)
00029b e0b0      	LDI  R27,HIGH(1)
00029c 940e 03df 	CALL __LSLW12
00029e 2da1      	MOV  R26,R1
00029f e0b0      	LDI  R27,0
0002a0 23ea      	AND  R30,R26
0002a1 23fb      	AND  R31,R27
0002a2 9730      	SBIW R30,0
0002a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4:
0002a4 9724      	SBIW R28,4
0002a5 e0e0      	LDI  R30,LOW(0)
0002a6 83e8      	ST   Y,R30
0002a7 83e9      	STD  Y+1,R30
0002a8 83ea      	STD  Y+2,R30
0002a9 83eb      	STD  Y+3,R30
0002aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0002ab 81e8      	LD   R30,Y
0002ac 81f9      	LDD  R31,Y+1
0002ad 9631      	ADIW R30,1
0002ae 83e8      	ST   Y,R30
0002af 83f9      	STD  Y+1,R31
0002b0 81a8      	LD   R26,Y
0002b1 81b9      	LDD  R27,Y+1
0002b2 3ca9      	CPI  R26,LOW(0xC9)
0002b3 e0e0      	LDI  R30,HIGH(0xC9)
0002b4 07be      	CPC  R27,R30
0002b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6:
0002b6 940e 03e8 	CALL __CWD1
0002b8 940e 030a 	CALL __CDF1
0002ba 01df      	MOVW R26,R30
0002bb 01cb      	MOVW R24,R22
                +
0002bc e0e0     +LDI R30 , LOW ( 0x41200000 )
0002bd e0f0     +LDI R31 , HIGH ( 0x41200000 )
0002be e260     +LDI R22 , BYTE3 ( 0x41200000 )
0002bf e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0002c0 940e 0386 	CALL __DIVF21
0002c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002c3 940e 01ec 	CALL __lcd_write_data
0002c5 e0a3      	LDI  R26,LOW(3)
0002c6 e0b0      	LDI  R27,0
0002c7 940c 02d1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0002c9 e3a0      	LDI  R26,LOW(48)
0002ca 940e 01d8 	CALL __lcd_write_nibble_G101
                +
0002cc ec88     +LDI R24 , LOW ( 200 )
0002cd e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002ce 9701     +SBIW R24 , 1
0002cf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002d0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002d1 9610      	adiw r26,0
0002d2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002d3 ed80     +LDI R24 , LOW ( 0x7D0 )
0002d4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002d5 9701     +SBIW R24 , 1
0002d6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002d7 95a8      	wdr
0002d8 9711      	sbiw r26,1
0002d9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002da 9508      	ret
                 
                 __ROUND_REPACK:
0002db 2355      	TST  R21
0002dc f442      	BRPL __REPACK
0002dd 3850      	CPI  R21,0x80
0002de f411      	BRNE __ROUND_REPACK0
0002df ffe0      	SBRS R30,0
0002e0 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002e1 9631      	ADIW R30,1
0002e2 1f69      	ADC  R22,R25
0002e3 1f79      	ADC  R23,R25
0002e4 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002e5 e850      	LDI  R21,0x80
0002e6 2757      	EOR  R21,R23
0002e7 f411      	BRNE __REPACK0
0002e8 935f      	PUSH R21
0002e9 c03c      	RJMP __ZERORES
                 __REPACK0:
0002ea 3f5f      	CPI  R21,0xFF
0002eb f031      	BREQ __REPACK1
0002ec 0f66      	LSL  R22
0002ed 0c00      	LSL  R0
0002ee 9557      	ROR  R21
0002ef 9567      	ROR  R22
0002f0 2f75      	MOV  R23,R21
0002f1 9508      	RET
                 __REPACK1:
0002f2 935f      	PUSH R21
0002f3 2000      	TST  R0
0002f4 f00a      	BRMI __REPACK2
0002f5 c03c      	RJMP __MAXRES
                 __REPACK2:
0002f6 c035      	RJMP __MINRES
                 
                 __UNPACK:
0002f7 e850      	LDI  R21,0x80
0002f8 2e19      	MOV  R1,R25
0002f9 2215      	AND  R1,R21
0002fa 0f88      	LSL  R24
0002fb 1f99      	ROL  R25
0002fc 2795      	EOR  R25,R21
0002fd 0f55      	LSL  R21
0002fe 9587      	ROR  R24
                 
                 __UNPACK1:
0002ff e850      	LDI  R21,0x80
000300 2e07      	MOV  R0,R23
000301 2205      	AND  R0,R21
000302 0f66      	LSL  R22
000303 1f77      	ROL  R23
000304 2775      	EOR  R23,R21
000305 0f55      	LSL  R21
000306 9567      	ROR  R22
000307 9508      	RET
                 
                 __CDF1U:
000308 9468      	SET
000309 c001      	RJMP __CDF1U0
                 __CDF1:
00030a 94e8      	CLT
                 __CDF1U0:
00030b 9730      	SBIW R30,0
00030c 4060      	SBCI R22,0
00030d 4070      	SBCI R23,0
00030e f0b1      	BREQ __CDF10
00030f 2400      	CLR  R0
000310 f026      	BRTS __CDF11
000311 2377      	TST  R23
000312 f412      	BRPL __CDF11
000313 9400      	COM  R0
000314 d0ba      	RCALL __ANEGD1
                 __CDF11:
000315 2e17      	MOV  R1,R23
000316 e17e      	LDI  R23,30
000317 2011      	TST  R1
                 __CDF12:
000318 f032      	BRMI __CDF13
000319 957a      	DEC  R23
00031a 0fee      	LSL  R30
00031b 1fff      	ROL  R31
00031c 1f66      	ROL  R22
00031d 1c11      	ROL  R1
00031e cff9      	RJMP __CDF12
                 __CDF13:
00031f 2fef      	MOV  R30,R31
000320 2ff6      	MOV  R31,R22
000321 2d61      	MOV  R22,R1
000322 935f      	PUSH R21
000323 dfc1      	RCALL __REPACK
000324 915f      	POP  R21
                 __CDF10:
000325 9508      	RET
                 
                 __ZERORES:
000326 27ee      	CLR  R30
000327 27ff      	CLR  R31
000328 2766      	CLR  R22
000329 2777      	CLR  R23
00032a 915f      	POP  R21
00032b 9508      	RET
                 
                 __MINRES:
00032c efef      	SER  R30
00032d efff      	SER  R31
00032e e76f      	LDI  R22,0x7F
00032f ef7f      	SER  R23
000330 915f      	POP  R21
000331 9508      	RET
                 
                 __MAXRES:
000332 efef      	SER  R30
000333 efff      	SER  R31
000334 e76f      	LDI  R22,0x7F
000335 e77f      	LDI  R23,0x7F
000336 915f      	POP  R21
000337 9508      	RET
                 
                 __MULF12:
000338 935f      	PUSH R21
000339 dfbd      	RCALL __UNPACK
00033a 3870      	CPI  R23,0x80
00033b f351      	BREQ __ZERORES
00033c 3890      	CPI  R25,0x80
00033d f341      	BREQ __ZERORES
00033e 2401      	EOR  R0,R1
00033f 9408      	SEC
000340 1f79      	ADC  R23,R25
000341 f423      	BRVC __MULF124
000342 f31c      	BRLT __ZERORES
                 __MULF125:
000343 2000      	TST  R0
000344 f33a      	BRMI __MINRES
000345 cfec      	RJMP __MAXRES
                 __MULF124:
000346 920f      	PUSH R0
000347 931f      	PUSH R17
000348 932f      	PUSH R18
000349 933f      	PUSH R19
00034a 934f      	PUSH R20
00034b 2711      	CLR  R17
00034c 2722      	CLR  R18
00034d 2799      	CLR  R25
00034e 9f68      	MUL  R22,R24
00034f 01a0      	MOVW R20,R0
000350 9f8f      	MUL  R24,R31
000351 2d30      	MOV  R19,R0
000352 0d41      	ADD  R20,R1
000353 1f59      	ADC  R21,R25
000354 9f6b      	MUL  R22,R27
000355 0d30      	ADD  R19,R0
000356 1d41      	ADC  R20,R1
000357 1f59      	ADC  R21,R25
000358 9f8e      	MUL  R24,R30
000359 d027      	RCALL __MULF126
00035a 9fbf      	MUL  R27,R31
00035b d025      	RCALL __MULF126
00035c 9f6a      	MUL  R22,R26
00035d d023      	RCALL __MULF126
00035e 9fbe      	MUL  R27,R30
00035f d01d      	RCALL __MULF127
000360 9faf      	MUL  R26,R31
000361 d01b      	RCALL __MULF127
000362 9fae      	MUL  R26,R30
000363 0d11      	ADD  R17,R1
000364 1f29      	ADC  R18,R25
000365 1f39      	ADC  R19,R25
000366 1f49      	ADC  R20,R25
000367 1f59      	ADC  R21,R25
000368 2fe3      	MOV  R30,R19
000369 2ff4      	MOV  R31,R20
00036a 2f65      	MOV  R22,R21
00036b 2f52      	MOV  R21,R18
00036c 914f      	POP  R20
00036d 913f      	POP  R19
00036e 912f      	POP  R18
00036f 911f      	POP  R17
000370 900f      	POP  R0
000371 2366      	TST  R22
000372 f02a      	BRMI __MULF122
000373 0f55      	LSL  R21
000374 1fee      	ROL  R30
000375 1fff      	ROL  R31
000376 1f66      	ROL  R22
000377 c002      	RJMP __MULF123
                 __MULF122:
000378 9573      	INC  R23
000379 f24b      	BRVS __MULF125
                 __MULF123:
00037a df60      	RCALL __ROUND_REPACK
00037b 915f      	POP  R21
00037c 9508      	RET
                 
                 __MULF127:
00037d 0d10      	ADD  R17,R0
00037e 1d21      	ADC  R18,R1
00037f 1f39      	ADC  R19,R25
000380 c002      	RJMP __MULF128
                 __MULF126:
000381 0d20      	ADD  R18,R0
000382 1d31      	ADC  R19,R1
                 __MULF128:
000383 1f49      	ADC  R20,R25
000384 1f59      	ADC  R21,R25
000385 9508      	RET
                 
                 __DIVF21:
000386 935f      	PUSH R21
000387 df6f      	RCALL __UNPACK
000388 3870      	CPI  R23,0x80
000389 f421      	BRNE __DIVF210
00038a 2011      	TST  R1
                 __DIVF211:
00038b f40a      	BRPL __DIVF219
00038c cf9f      	RJMP __MINRES
                 __DIVF219:
00038d cfa4      	RJMP __MAXRES
                 __DIVF210:
00038e 3890      	CPI  R25,0x80
00038f f409      	BRNE __DIVF218
                 __DIVF217:
000390 cf95      	RJMP __ZERORES
                 __DIVF218:
000391 2401      	EOR  R0,R1
000392 9408      	SEC
000393 0b97      	SBC  R25,R23
000394 f41b      	BRVC __DIVF216
000395 f3d4      	BRLT __DIVF217
000396 2000      	TST  R0
000397 cff3      	RJMP __DIVF211
                 __DIVF216:
000398 2f79      	MOV  R23,R25
000399 931f      	PUSH R17
00039a 932f      	PUSH R18
00039b 933f      	PUSH R19
00039c 934f      	PUSH R20
00039d 2411      	CLR  R1
00039e 2711      	CLR  R17
00039f 2722      	CLR  R18
0003a0 2733      	CLR  R19
0003a1 2744      	CLR  R20
0003a2 2755      	CLR  R21
0003a3 e290      	LDI  R25,32
                 __DIVF212:
0003a4 17ae      	CP   R26,R30
0003a5 07bf      	CPC  R27,R31
0003a6 0786      	CPC  R24,R22
0003a7 0741      	CPC  R20,R17
0003a8 f030      	BRLO __DIVF213
0003a9 1bae      	SUB  R26,R30
0003aa 0bbf      	SBC  R27,R31
0003ab 0b86      	SBC  R24,R22
0003ac 0b41      	SBC  R20,R17
0003ad 9408      	SEC
0003ae c001      	RJMP __DIVF214
                 __DIVF213:
0003af 9488      	CLC
                 __DIVF214:
0003b0 1f55      	ROL  R21
0003b1 1f22      	ROL  R18
0003b2 1f33      	ROL  R19
0003b3 1c11      	ROL  R1
0003b4 1faa      	ROL  R26
0003b5 1fbb      	ROL  R27
0003b6 1f88      	ROL  R24
0003b7 1f44      	ROL  R20
0003b8 959a      	DEC  R25
0003b9 f751      	BRNE __DIVF212
0003ba 01f9      	MOVW R30,R18
0003bb 2d61      	MOV  R22,R1
0003bc 914f      	POP  R20
0003bd 913f      	POP  R19
0003be 912f      	POP  R18
0003bf 911f      	POP  R17
0003c0 2366      	TST  R22
0003c1 f032      	BRMI __DIVF215
0003c2 0f55      	LSL  R21
0003c3 1fee      	ROL  R30
0003c4 1fff      	ROL  R31
0003c5 1f66      	ROL  R22
0003c6 957a      	DEC  R23
0003c7 f243      	BRVS __DIVF217
                 __DIVF215:
0003c8 df12      	RCALL __ROUND_REPACK
0003c9 915f      	POP  R21
0003ca 9508      	RET
                 
                 __ANEGW1:
0003cb 95f1      	NEG  R31
0003cc 95e1      	NEG  R30
0003cd 40f0      	SBCI R31,0
0003ce 9508      	RET
                 
                 __ANEGD1:
0003cf 95f0      	COM  R31
0003d0 9560      	COM  R22
0003d1 9570      	COM  R23
0003d2 95e1      	NEG  R30
0003d3 4fff      	SBCI R31,-1
0003d4 4f6f      	SBCI R22,-1
0003d5 4f7f      	SBCI R23,-1
0003d6 9508      	RET
                 
                 __LSLB12:
0003d7 23ee      	TST  R30
0003d8 2e0e      	MOV  R0,R30
0003d9 2fea      	MOV  R30,R26
0003da f019      	BREQ __LSLB12R
                 __LSLB12L:
0003db 0fee      	LSL  R30
0003dc 940a      	DEC  R0
0003dd f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0003de 9508      	RET
                 
                 __LSLW12:
0003df 23ee      	TST  R30
0003e0 2e0e      	MOV  R0,R30
0003e1 01fd      	MOVW R30,R26
0003e2 f021      	BREQ __LSLW12R
                 __LSLW12L:
0003e3 0fee      	LSL  R30
0003e4 1fff      	ROL  R31
0003e5 940a      	DEC  R0
0003e6 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
0003e7 9508      	RET
                 
                 __CWD1:
0003e8 2f6f      	MOV  R22,R31
0003e9 0f66      	ADD  R22,R22
0003ea 0b66      	SBC  R22,R22
0003eb 2f76      	MOV  R23,R22
0003ec 9508      	RET
                 
                 __DIVW21U:
0003ed 2400      	CLR  R0
0003ee 2411      	CLR  R1
0003ef e190      	LDI  R25,16
                 __DIVW21U1:
0003f0 0faa      	LSL  R26
0003f1 1fbb      	ROL  R27
0003f2 1c00      	ROL  R0
0003f3 1c11      	ROL  R1
0003f4 1a0e      	SUB  R0,R30
0003f5 0a1f      	SBC  R1,R31
0003f6 f418      	BRCC __DIVW21U2
0003f7 0e0e      	ADD  R0,R30
0003f8 1e1f      	ADC  R1,R31
0003f9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003fa 60a1      	SBR  R26,1
                 __DIVW21U3:
0003fb 959a      	DEC  R25
0003fc f799      	BRNE __DIVW21U1
0003fd 01fd      	MOVW R30,R26
0003fe 01d0      	MOVW R26,R0
0003ff 9508      	RET
                 
                 __DIVW21:
000400 d012      	RCALL __CHKSIGNW
000401 dfeb      	RCALL __DIVW21U
000402 f40e      	BRTC __DIVW211
000403 dfc7      	RCALL __ANEGW1
                 __DIVW211:
000404 9508      	RET
                 
                 __MODW21:
000405 94e8      	CLT
000406 ffb7      	SBRS R27,7
000407 c004      	RJMP __MODW211
000408 95a0      	COM  R26
000409 95b0      	COM  R27
00040a 9611      	ADIW R26,1
00040b 9468      	SET
                 __MODW211:
00040c fdf7      	SBRC R31,7
00040d dfbd      	RCALL __ANEGW1
00040e dfde      	RCALL __DIVW21U
00040f 01fd      	MOVW R30,R26
000410 f40e      	BRTC __MODW212
000411 dfb9      	RCALL __ANEGW1
                 __MODW212:
000412 9508      	RET
                 
                 __CHKSIGNW:
000413 94e8      	CLT
000414 fff7      	SBRS R31,7
000415 c002      	RJMP __CHKSW1
000416 dfb4      	RCALL __ANEGW1
000417 9468      	SET
                 __CHKSW1:
000418 ffb7      	SBRS R27,7
000419 c006      	RJMP __CHKSW2
00041a 95a0      	COM  R26
00041b 95b0      	COM  R27
00041c 9611      	ADIW R26,1
00041d f800      	BLD  R0,0
00041e 9403      	INC  R0
00041f fa00      	BST  R0,0
                 __CHKSW2:
000420 9508      	RET
                 
                 __PUTDP1:
000421 93ed      	ST   X+,R30
000422 93fd      	ST   X+,R31
000423 936d      	ST   X+,R22
000424 937c      	ST   X,R23
000425 9508      	RET
                 
                 __SAVELOCR4:
000426 933a      	ST   -Y,R19
                 __SAVELOCR3:
000427 932a      	ST   -Y,R18
                 __SAVELOCR2:
000428 931a      	ST   -Y,R17
000429 930a      	ST   -Y,R16
00042a 9508      	RET
                 
                 __LOADLOCR4:
00042b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00042c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00042d 8119      	LDD  R17,Y+1
00042e 8108      	LD   R16,Y
00042f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  33 r1 :  32 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   2 r7 :   0 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  23 r18:  19 r19:  18 r20:  14 r21:  36 r22:  38 r23:  26 
r24:  41 r25:  31 r26: 114 r27:  57 r28:  19 r29:   1 r30: 214 r31:  70 
x  :   7 y  : 124 z  :  12 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  12 
adiw  :  21 and   :   6 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   5 brmi  :   5 brne  :  29 brpl  :   3 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 call  :  55 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :  10 
cp    :   3 cpc   :   7 cpi   :  12 cpse  :   0 dec   :  15 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   4 jmp   :  24 ld    :  17 ldd   :  55 ldi   : 135 
lds   :   0 lpm   :   9 lsl   :  13 lsr   :   0 mov   :  28 movw  :  23 
mul   :   9 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :  10 
ori   :   1 out   :  47 pop   :  15 push  :  14 rcall :  36 ret   :  37 
reti  :   0 rjmp  :  38 rol   :  24 ror   :   4 sbc   :   7 sbci  :   9 
sbi   :   5 sbic  :   4 sbis  :   0 sbiw  :  15 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   5 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  46 std   :  17 sts   :   2 sub   :   3 subi  :   7 swap  :   1 
tst   :  11 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000860   2092     52   2144   16384  13.1%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
