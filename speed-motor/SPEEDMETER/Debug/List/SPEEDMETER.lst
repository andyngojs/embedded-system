
AVRASM ver. 2.1.30  F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm Tue Oct 19 15:12:45 2021

F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1089): warning: Register r4 already defined by the .DEF directive
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1091): warning: Register r8 already defined by the .DEF directive
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1092): warning: Register r9 already defined by the .DEF directive
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1093): warning: Register r6 already defined by the .DEF directive
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1094): warning: Register r11 already defined by the .DEF directive
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1095): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _chan=R5
                 	.DEF _le=R4
                 	.DEF _MOTOR_ON=R7
                 	.DEF _fullSpeed=R8
                 	.DEF _fullSpeed_msb=R9
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 0060 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0088 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
F:\Electronics\AVR\speed-motor\SPEEDMETER\Debug\List\SPEEDMETER.asm(1128): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 _0x2000003:
00002b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002c 0001      	.DW  0x01
00002d 0007      	.DW  0x07
00002e 0054      	.DW  __REG_VARS*2
                 
00002f 0002      	.DW  0x02
000030 0160      	.DW  __base_y_G100
000031 0056      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000046 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000047 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000048 9185      	LPM  R24,Z+
000049 9195      	LPM  R25,Z+
00004a 9700      	SBIW R24,0
00004b f061      	BREQ __GLOBAL_INI_END
00004c 91a5      	LPM  R26,Z+
00004d 91b5      	LPM  R27,Z+
00004e 9005      	LPM  R0,Z+
00004f 9015      	LPM  R1,Z+
000050 01bf      	MOVW R22,R30
000051 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000052 9005      	LPM  R0,Z+
000053 920d      	ST   X+,R0
000054 9701      	SBIW R24,1
000055 f7e1      	BRNE __GLOBAL_INI_LOOP
000056 01fb      	MOVW R30,R22
000057 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000058 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000059 bfed      	OUT  SPL,R30
00005a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005e 940c 00b6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Project : Do Toc Do
                 ;Version :
                 ;Date    : 10/18/2021
                 ;Author  : andyngojs
                 ;Company :
                 ;Comments:
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;
                 ;// bool MOTOR_ON;
                 ;unsigned char chan, le, MOTOR_ON = 0;
                 ;unsigned int fullSpeed;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000060 920a      	ST   -Y,R0
000061 921a      	ST   -Y,R1
000062 93aa      	ST   -Y,R26
000063 93ba      	ST   -Y,R27
000064 93ea      	ST   -Y,R30
000065 93fa      	ST   -Y,R31
000066 b7ef      	IN   R30,SREG
000067 93ea      	ST   -Y,R30
                 ; 0000 0014     if (!MOTOR_ON) {
000068 2077      	TST  R7
000069 f429      	BRNE _0x3
                 ; 0000 0015         TCCR0 = 0x02;
00006a e0e2      	LDI  R30,LOW(2)
00006b bfe3      	OUT  0x33,R30
                 ; 0000 0016         MOTOR_ON = 1;
00006c e0e1      	LDI  R30,LOW(1)
00006d 2e7e      	MOV  R7,R30
                 ; 0000 0017     }
                 ; 0000 0018     else {
00006e c00f      	RJMP _0x4
                 _0x3:
                 ; 0000 0019         le = TCNT0;
00006f b642      	IN   R4,50
                 ; 0000 001A         TCNT0 = 0;
000070 e0e0      	LDI  R30,LOW(0)
000071 bfe2      	OUT  0x32,R30
                 ; 0000 001B         fullSpeed = chan*256+le;
000072 2da5      	MOV  R26,R5
000073 e0b0      	LDI  R27,0
000074 e0e0      	LDI  R30,LOW(256)
000075 e0f1      	LDI  R31,HIGH(256)
000076 940e 0193 	CALL __MULW12
000078 01df      	MOVW R26,R30
000079 2de4      	MOV  R30,R4
00007a e0f0      	LDI  R31,0
00007b 0fea      	ADD  R30,R26
00007c 1ffb      	ADC  R31,R27
00007d 014f      	MOVW R8,R30
                 ; 0000 001C     }
                 _0x4:
                 ; 0000 001D     chan = 0;
00007e 2455      	CLR  R5
                 ; 0000 001E }
00007f 91e9      	LD   R30,Y+
000080 bfef      	OUT  SREG,R30
000081 91f9      	LD   R31,Y+
000082 91e9      	LD   R30,Y+
000083 91b9      	LD   R27,Y+
000084 91a9      	LD   R26,Y+
000085 9019      	LD   R1,Y+
000086 9009      	LD   R0,Y+
000087 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0022 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000088 93ea      	ST   -Y,R30
000089 b7ef      	IN   R30,SREG
                 ; 0000 0023     chan++;
00008a 9453      	INC  R5
                 ; 0000 0024 
                 ; 0000 0025 }
00008b bfef      	OUT  SREG,R30
00008c 91e9      	LD   R30,Y+
00008d 9518      	RETI
                 ; .FEND
                 ;
                 ;void putnumber(unsigned int num) {
                 ; 0000 0027 void putnumber(unsigned int num) {
                 _putnumber:
                 ; .FSTART _putnumber
                 ; 0000 0028     unsigned int temp;
                 ; 0000 0029     temp = num;
00008e 93ba      	ST   -Y,R27
00008f 93aa      	ST   -Y,R26
000090 931a      	ST   -Y,R17
000091 930a      	ST   -Y,R16
                 ;	num -> Y+2
                 ;	temp -> R16,R17
                +
000092 810a     +LDD R16 , Y + 2
000093 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
                 ; 0000 002A     lcd_putchar(temp/10000+48);
000094 01d8      	MOVW R26,R16
000095 e1e0      	LDI  R30,LOW(10000)
000096 e2f7      	LDI  R31,HIGH(10000)
000097 d0cd      	RCALL SUBOPT_0x0
                 ; 0000 002B     temp = temp % 10000;
000098 e1e0      	LDI  R30,LOW(10000)
000099 e2f7      	LDI  R31,HIGH(10000)
00009a d0d1      	RCALL SUBOPT_0x1
                 ; 0000 002C     lcd_putchar(temp/1000+48);
00009b eee8      	LDI  R30,LOW(1000)
00009c e0f3      	LDI  R31,HIGH(1000)
00009d d0c7      	RCALL SUBOPT_0x0
                 ; 0000 002D     temp = temp % 1000;
00009e eee8      	LDI  R30,LOW(1000)
00009f e0f3      	LDI  R31,HIGH(1000)
0000a0 d0cb      	RCALL SUBOPT_0x1
                 ; 0000 002E     lcd_putchar(temp/100+48);
0000a1 e6e4      	LDI  R30,LOW(100)
0000a2 e0f0      	LDI  R31,HIGH(100)
0000a3 d0c1      	RCALL SUBOPT_0x0
                 ; 0000 002F     temp = temp % 100;
0000a4 e6e4      	LDI  R30,LOW(100)
0000a5 e0f0      	LDI  R31,HIGH(100)
0000a6 d0c5      	RCALL SUBOPT_0x1
                 ; 0000 0030     lcd_putchar(temp/10+48);
0000a7 e0ea      	LDI  R30,LOW(10)
0000a8 e0f0      	LDI  R31,HIGH(10)
0000a9 d0bb      	RCALL SUBOPT_0x0
                 ; 0000 0031     temp = temp % 10;
0000aa e0ea      	LDI  R30,LOW(10)
0000ab e0f0      	LDI  R31,HIGH(10)
0000ac 940e 01ab 	CALL __MODW21U
0000ae 018f      	MOVW R16,R30
                 ; 0000 0032     lcd_putchar(temp+48);
0000af 2fa0      	MOV  R26,R16
0000b0 5da0      	SUBI R26,-LOW(48)
0000b1 d074      	RCALL _lcd_putchar
                 ; 0000 0033 }
0000b2 8119      	LDD  R17,Y+1
0000b3 8108      	LDD  R16,Y+0
0000b4 9624      	ADIW R28,4
0000b5 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0036 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0037 // Input/Output Ports initialization
                 ; 0000 0038 // Port A initialization
                 ; 0000 0039 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbea      	OUT  0x1A,R30
                 ; 0000 003B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000b8 bbeb      	OUT  0x1B,R30
                 ; 0000 003D 
                 ; 0000 003E // Port B initialization
                 ; 0000 003F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0040 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000b9 bbe7      	OUT  0x17,R30
                 ; 0000 0041 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0042 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ba bbe8      	OUT  0x18,R30
                 ; 0000 0043 
                 ; 0000 0044 // Port C initialization
                 ; 0000 0045 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0046 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000bb bbe4      	OUT  0x14,R30
                 ; 0000 0047 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0048 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000bc bbe5      	OUT  0x15,R30
                 ; 0000 0049 
                 ; 0000 004A // Port D initialization
                 ; 0000 004B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004C DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000bd bbe1      	OUT  0x11,R30
                 ; 0000 004D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000be bbe2      	OUT  0x12,R30
                 ; 0000 004F 
                 ; 0000 0050 // Timer/Counter 0 initialization
                 ; 0000 0051 // Clock source: System Clock
                 ; 0000 0052 // Clock value: Timer 0 Stopped
                 ; 0000 0053 // Mode: Normal top=0xFF
                 ; 0000 0054 // OC0 output: Disconnected
                 ; 0000 0055 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000bf bfe3      	OUT  0x33,R30
                 ; 0000 0056 TCNT0=0x00;
0000c0 bfe2      	OUT  0x32,R30
                 ; 0000 0057 OCR0=0x00;
0000c1 bfec      	OUT  0x3C,R30
                 ; 0000 0058 
                 ; 0000 0059 // Timer/Counter 1 initialization
                 ; 0000 005A // Clock source: System Clock
                 ; 0000 005B // Clock value: Timer1 Stopped
                 ; 0000 005C // Mode: Normal top=0xFFFF
                 ; 0000 005D // OC1A output: Disconnected
                 ; 0000 005E // OC1B output: Disconnected
                 ; 0000 005F // Noise Canceler: Off
                 ; 0000 0060 // Input Capture on Falling Edge
                 ; 0000 0061 // Timer1 Overflow Interrupt: Off
                 ; 0000 0062 // Input Capture Interrupt: Off
                 ; 0000 0063 // Compare A Match Interrupt: Off
                 ; 0000 0064 // Compare B Match Interrupt: Off
                 ; 0000 0065 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c2 bdef      	OUT  0x2F,R30
                 ; 0000 0066 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c3 bdee      	OUT  0x2E,R30
                 ; 0000 0067 TCNT1H=0x00;
0000c4 bded      	OUT  0x2D,R30
                 ; 0000 0068 TCNT1L=0x00;
0000c5 bdec      	OUT  0x2C,R30
                 ; 0000 0069 ICR1H=0x00;
0000c6 bde7      	OUT  0x27,R30
                 ; 0000 006A ICR1L=0x00;
0000c7 bde6      	OUT  0x26,R30
                 ; 0000 006B OCR1AH=0x00;
0000c8 bdeb      	OUT  0x2B,R30
                 ; 0000 006C OCR1AL=0x00;
0000c9 bdea      	OUT  0x2A,R30
                 ; 0000 006D OCR1BH=0x00;
0000ca bde9      	OUT  0x29,R30
                 ; 0000 006E OCR1BL=0x00;
0000cb bde8      	OUT  0x28,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer/Counter 2 initialization
                 ; 0000 0071 // Clock source: System Clock
                 ; 0000 0072 // Clock value: Timer2 Stopped
                 ; 0000 0073 // Mode: Normal top=0xFF
                 ; 0000 0074 // OC2 output: Disconnected
                 ; 0000 0075 ASSR=0<<AS2;
0000cc bde2      	OUT  0x22,R30
                 ; 0000 0076 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000cd bde5      	OUT  0x25,R30
                 ; 0000 0077 TCNT2=0x00;
0000ce bde4      	OUT  0x24,R30
                 ; 0000 0078 OCR2=0x00;
0000cf bde3      	OUT  0x23,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 007B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000d0 e0e1      	LDI  R30,LOW(1)
0000d1 bfe9      	OUT  0x39,R30
                 ; 0000 007C 
                 ; 0000 007D // External Interrupt(s) initialization
                 ; 0000 007E // INT0: On
                 ; 0000 007F // INT0 Mode: Rising Edge
                 ; 0000 0080 // INT1: Off
                 ; 0000 0081 // INT2: Off
                 ; 0000 0082 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
0000d2 b7eb      	IN   R30,0x3B
0000d3 64e0      	ORI  R30,0x40
0000d4 bfeb      	OUT  0x3B,R30
                 ; 0000 0083 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000d5 e0e3      	LDI  R30,LOW(3)
0000d6 bfe5      	OUT  0x35,R30
                 ; 0000 0084 MCUCSR=(0<<ISC2);
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bfe4      	OUT  0x34,R30
                 ; 0000 0085 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000d9 e4e0      	LDI  R30,LOW(64)
0000da bfea      	OUT  0x3A,R30
                 ; 0000 0086 
                 ; 0000 0087 // USART initialization
                 ; 0000 0088 // USART disabled
                 ; 0000 0089 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000db e0e0      	LDI  R30,LOW(0)
0000dc b9ea      	OUT  0xA,R30
                 ; 0000 008A 
                 ; 0000 008B // Analog Comparator initialization
                 ; 0000 008C // Analog Comparator: Off
                 ; 0000 008D // The Analog Comparator's positive input is
                 ; 0000 008E // connected to the AIN0 pin
                 ; 0000 008F // The Analog Comparator's negative input is
                 ; 0000 0090 // connected to the AIN1 pin
                 ; 0000 0091 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000dd e8e0      	LDI  R30,LOW(128)
0000de b9e8      	OUT  0x8,R30
                 ; 0000 0092 SFIOR=(0<<ACME);
0000df e0e0      	LDI  R30,LOW(0)
0000e0 bfe0      	OUT  0x30,R30
                 ; 0000 0093 
                 ; 0000 0094 // ADC initialization
                 ; 0000 0095 // ADC disabled
                 ; 0000 0096 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000e1 b9e6      	OUT  0x6,R30
                 ; 0000 0097 
                 ; 0000 0098 // SPI initialization
                 ; 0000 0099 // SPI disabled
                 ; 0000 009A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000e2 b9ed      	OUT  0xD,R30
                 ; 0000 009B 
                 ; 0000 009C // TWI initialization
                 ; 0000 009D // TWI disabled
                 ; 0000 009E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000e3 bfe6      	OUT  0x36,R30
                 ; 0000 009F 
                 ; 0000 00A0 // Alphanumeric LCD initialization
                 ; 0000 00A1 // Connections are specified in the
                 ; 0000 00A2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A3 // RS - PORTC Bit 0
                 ; 0000 00A4 // RD - PORTC Bit 1
                 ; 0000 00A5 // EN - PORTC Bit 2
                 ; 0000 00A6 // D4 - PORTC Bit 4
                 ; 0000 00A7 // D5 - PORTC Bit 5
                 ; 0000 00A8 // D6 - PORTC Bit 6
                 ; 0000 00A9 // D7 - PORTC Bit 7
                 ; 0000 00AA // Characters/line: 8
                 ; 0000 00AB lcd_init(8);
0000e4 e0a8      	LDI  R26,LOW(8)
0000e5 d054      	RCALL _lcd_init
                 ; 0000 00AC 
                 ; 0000 00AD // Global enable interrupts
                 ; 0000 00AE #asm("sei")
0000e6 9478      	sei
                 ; 0000 00AF 
                 ; 0000 00B0 while (1)
                 _0x5:
                 ; 0000 00B1       {
                 ; 0000 00B2         lcd_gotoxy(2,0);
0000e7 e0e2      	LDI  R30,LOW(2)
0000e8 93ea      	ST   -Y,R30
0000e9 e0a0      	LDI  R26,LOW(0)
0000ea d024      	RCALL _lcd_gotoxy
                 ; 0000 00B3         putnumber(fullSpeed);
0000eb 01d4      	MOVW R26,R8
0000ec dfa1      	RCALL _putnumber
                 ; 0000 00B4 
                 ; 0000 00B5       }
0000ed cff9      	RJMP _0x5
                 ; 0000 00B6 }
                 _0x8:
0000ee cfff      	RJMP _0x8
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ef 93aa      	ST   -Y,R26
0000f0 b3e5      	IN   R30,0x15
0000f1 70ef      	ANDI R30,LOW(0xF)
0000f2 2fae      	MOV  R26,R30
0000f3 81e8      	LD   R30,Y
0000f4 7fe0      	ANDI R30,LOW(0xF0)
0000f5 2bea      	OR   R30,R26
0000f6 bbe5      	OUT  0x15,R30
                +
0000f7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fa 9aaa      	SBI  0x15,2
                +
0000fb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fc 958a     +DEC R24
0000fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fe 98aa      	CBI  0x15,2
                +
0000ff e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000100 958a     +DEC R24
000101 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000102 c060      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000103 93aa      	ST   -Y,R26
000104 81a8      	LD   R26,Y
000105 dfe9      	RCALL __lcd_write_nibble_G100
000106 81e8          ld    r30,y
000107 95e2          swap  r30
000108 83e8          st    y,r30
000109 81a8      	LD   R26,Y
00010a dfe4      	RCALL __lcd_write_nibble_G100
                +
00010b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00010c 958a     +DEC R24
00010d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00010e c054      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010f 93aa      	ST   -Y,R26
000110 81e8      	LD   R30,Y
000111 e0f0      	LDI  R31,0
000112 5ae0      	SUBI R30,LOW(-__base_y_G100)
000113 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000114 81e0      	LD   R30,Z
000115 81a9      	LDD  R26,Y+1
000116 0fae      	ADD  R26,R30
000117 dfeb      	RCALL __lcd_write_data
000118 8069      	LDD  R6,Y+1
000119 80b8      	LDD  R11,Y+0
00011a 9622      	ADIW R28,2
00011b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011c e0a2      	LDI  R26,LOW(2)
00011d d053      	RCALL SUBOPT_0x2
00011e e0ac      	LDI  R26,LOW(12)
00011f dfe3      	RCALL __lcd_write_data
000120 e0a1      	LDI  R26,LOW(1)
000121 d04f      	RCALL SUBOPT_0x2
000122 e0e0      	LDI  R30,LOW(0)
000123 2ebe      	MOV  R11,R30
000124 2e6e      	MOV  R6,R30
000125 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000126 93aa      	ST   -Y,R26
000127 81a8      	LD   R26,Y
000128 30aa      	CPI  R26,LOW(0xA)
000129 f011      	BREQ _0x2000005
00012a 146a      	CP   R6,R10
00012b f040      	BRLO _0x2000004
                 _0x2000005:
00012c e0e0      	LDI  R30,LOW(0)
00012d 93ea      	ST   -Y,R30
00012e 94b3      	INC  R11
00012f 2dab      	MOV  R26,R11
000130 dfde      	RCALL _lcd_gotoxy
000131 81a8      	LD   R26,Y
000132 30aa      	CPI  R26,LOW(0xA)
000133 f179      	BREQ _0x2020001
                 _0x2000004:
000134 9463      	INC  R6
000135 9aa8      	SBI  0x15,0
000136 81a8      	LD   R26,Y
000137 dfcb      	RCALL __lcd_write_data
000138 98a8      	CBI  0x15,0
000139 c029      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00013a 93aa      	ST   -Y,R26
00013b b3e4      	IN   R30,0x14
00013c 6fe0      	ORI  R30,LOW(0xF0)
00013d bbe4      	OUT  0x14,R30
00013e 9aa2      	SBI  0x14,2
00013f 9aa0      	SBI  0x14,0
000140 9aa1      	SBI  0x14,1
000141 98aa      	CBI  0x15,2
000142 98a8      	CBI  0x15,0
000143 98a9      	CBI  0x15,1
000144 80a8      	LDD  R10,Y+0
000145 81e8      	LD   R30,Y
000146 58e0      	SUBI R30,-LOW(128)
                +
000147 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000149 81e8      	LD   R30,Y
00014a 54e0      	SUBI R30,-LOW(192)
                +
00014b 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00014d e1a4      	LDI  R26,LOW(20)
00014e e0b0      	LDI  R27,0
00014f 940e 017d 	CALL _delay_ms
000151 d024      	RCALL SUBOPT_0x3
000152 d023      	RCALL SUBOPT_0x3
000153 d022      	RCALL SUBOPT_0x3
000154 e2a0      	LDI  R26,LOW(32)
000155 df99      	RCALL __lcd_write_nibble_G100
                +
000156 ec88     +LDI R24 , LOW ( 200 )
000157 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000158 9701     +SBIW R24 , 1
000159 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00015a e2a8      	LDI  R26,LOW(40)
00015b dfa7      	RCALL __lcd_write_data
00015c e0a4      	LDI  R26,LOW(4)
00015d dfa5      	RCALL __lcd_write_data
00015e e8a5      	LDI  R26,LOW(133)
00015f dfa3      	RCALL __lcd_write_data
000160 e0a6      	LDI  R26,LOW(6)
000161 dfa1      	RCALL __lcd_write_data
000162 dfb9      	RCALL _lcd_clear
                 _0x2020001:
000163 9621      	ADIW R28,1
000164 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
000165 940e 0198 	CALL __DIVW21U
000167 5de0      	SUBI R30,-LOW(48)
000168 2fae      	MOV  R26,R30
000169 dfbc      	RCALL _lcd_putchar
00016a 01d8      	MOVW R26,R16
00016b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00016c 940e 01ab 	CALL __MODW21U
00016e 018f      	MOVW R16,R30
00016f 01d8      	MOVW R26,R16
000170 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000171 df91      	RCALL __lcd_write_data
000172 e0a3      	LDI  R26,LOW(3)
000173 e0b0      	LDI  R27,0
000174 940c 017d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000176 e3a0      	LDI  R26,LOW(48)
000177 df77      	RCALL __lcd_write_nibble_G100
                +
000178 ec88     +LDI R24 , LOW ( 200 )
000179 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00017a 9701     +SBIW R24 , 1
00017b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00017c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00017d 9610      	adiw r26,0
00017e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00017f ed80     +LDI R24 , LOW ( 0x7D0 )
000180 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000181 9701     +SBIW R24 , 1
000182 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000183 95a8      	wdr
000184 9711      	sbiw r26,1
000185 f7c9      	brne __delay_ms0
                 __delay_ms1:
000186 9508      	ret
                 
                 __ANEGW1:
000187 95f1      	NEG  R31
000188 95e1      	NEG  R30
000189 40f0      	SBCI R31,0
00018a 9508      	RET
                 
                 __MULW12U:
00018b 9ffa      	MUL  R31,R26
00018c 2df0      	MOV  R31,R0
00018d 9feb      	MUL  R30,R27
00018e 0df0      	ADD  R31,R0
00018f 9fea      	MUL  R30,R26
000190 2de0      	MOV  R30,R0
000191 0df1      	ADD  R31,R1
000192 9508      	RET
                 
                 __MULW12:
000193 d01a      	RCALL __CHKSIGNW
000194 dff6      	RCALL __MULW12U
000195 f40e      	BRTC __MULW121
000196 dff0      	RCALL __ANEGW1
                 __MULW121:
000197 9508      	RET
                 
                 __DIVW21U:
000198 2400      	CLR  R0
000199 2411      	CLR  R1
00019a e190      	LDI  R25,16
                 __DIVW21U1:
00019b 0faa      	LSL  R26
00019c 1fbb      	ROL  R27
00019d 1c00      	ROL  R0
00019e 1c11      	ROL  R1
00019f 1a0e      	SUB  R0,R30
0001a0 0a1f      	SBC  R1,R31
0001a1 f418      	BRCC __DIVW21U2
0001a2 0e0e      	ADD  R0,R30
0001a3 1e1f      	ADC  R1,R31
0001a4 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001a5 60a1      	SBR  R26,1
                 __DIVW21U3:
0001a6 959a      	DEC  R25
0001a7 f799      	BRNE __DIVW21U1
0001a8 01fd      	MOVW R30,R26
0001a9 01d0      	MOVW R26,R0
0001aa 9508      	RET
                 
                 __MODW21U:
0001ab dfec      	RCALL __DIVW21U
0001ac 01fd      	MOVW R30,R26
0001ad 9508      	RET
                 
                 __CHKSIGNW:
0001ae 94e8      	CLT
0001af fff7      	SBRS R31,7
0001b0 c002      	RJMP __CHKSW1
0001b1 dfd5      	RCALL __ANEGW1
0001b2 9468      	SET
                 __CHKSW1:
0001b3 ffb7      	SBRS R27,7
0001b4 c006      	RJMP __CHKSW2
0001b5 95a0      	COM  R26
0001b6 95b0      	COM  R27
0001b7 9611      	ADIW R26,1
0001b8 f800      	BLD  R0,0
0001b9 9403      	INC  R0
0001ba fa00      	BST  R0,0
                 __CHKSW2:
0001bb 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  17 r1 :   8 r2 :   0 r3 :   0 r4 :   2 r5 :   3 r6 :   4 r7 :   2 
r8 :   2 r9 :   0 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   9 r17:   3 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   7 r26:  57 r27:  13 r28:   4 r29:   1 r30: 131 r31:  27 
x  :   3 y  :  46 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :   5 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   1 cpc   :   0 cpi   :   2 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   4 jmp   :  23 ld    :  19 ldd   :   8 ldi   :  73 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  11 movw  :  14 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  48 pop   :   0 push  :   0 rcall :  36 ret   :  14 
reti  :   2 rjmp  :  10 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   0 sts   :   2 sub   :   1 subi  :   5 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000378    870     18    888   16384   5.4%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
